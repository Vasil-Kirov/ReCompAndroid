module gui;

#import mem
#import log
#import shader as *

enum CommandType {
    DrawBox,
    DrawShader,
    DrawText,
    DrawLine,
    DrawCircle,
}

struct CommandDrawBox {
    using Command,
    color: v4,
    box: Box,
    empty: bool,
}

struct CommandDrawShader {
    using Command,
    box: Box,
    shader: shader.Shader,
}

struct CommandDrawText {
    using Command,
    text: string,
    at: v2,
    scale: f32,
    centered: bool,
}

struct CommandDrawLine {
    using Command,
    from: v2,
    to: v2,
    color: v4,
    scale: f32,
}

struct CommandDrawCircle {
    using Command,
    at: v2,
    radius: f32,
    color: v4,
}

struct Command {
    type: CommandType,
}

push_cmd :: fn(gui: *GuiState, cmd: *Command) {
    gui.commands[gui.command_idx] = cmd;
    gui.command_idx += 1;
}

cmd_alloc :: fn(gui: *GuiState, T: type) -> *T {
    ptr := mem.make_type(T, &mem.temp_alloc);
    if ptr == null {
        log.fatal("Failed to allocate memory for command");
        log.exit(1);
    }
    return ?ptr;
}

cmd_drawcircle :: fn(gui: *GuiState, at: v2, r: f32, color: v4) -> *Command {
    command := cmd_alloc(gui, CommandDrawCircle);
    command.type = .DrawCircle;
    command.at = at;
    command.radius = r;
    command.color = color;
    return cast(*Command, command);
}

cmd_drawline :: fn(gui: *GuiState, from: v2, to: v2, color: v4, scale: f32 = 1.0) -> *Command {
    command := cmd_alloc(gui, CommandDrawLine);
    command.type = .DrawLine;
    command.from = from;
    command.to = to;
    command.color = color;
    command.scale = scale;
    return cast(*Command, command);
}

cmd_drawbox :: fn(gui: *GuiState, box: Box, color: v4, empty: bool = false) -> *Command {
    command := cmd_alloc(gui, CommandDrawBox);
    command.type = .DrawBox;
    command.box = box;
    command.color = color;
    command.empty = empty;
    return cast(*Command, command);
}

cmd_drawshader :: fn(gui: *GuiState, box: Box, shader: Shader) -> *Command {
    command := cmd_alloc(gui, CommandDrawShader);
    command.type = .DrawShader;
    command.box = box;
    command.shader = shader;
    return cast(*Command, command);
}

cmd_drawtext :: fn(gui: *GuiState, text: string, at: v2, scale: f32, centered: bool = false) -> *Command {
    command := cmd_alloc(gui, CommandDrawText);
    command.type = .DrawText;
    command.text = text;
    command.at = at;
    command.scale = scale;
    command.centered = centered;
    return cast(*Command, command);

}

