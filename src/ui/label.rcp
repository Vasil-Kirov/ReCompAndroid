module gui;

#import font

struct Label {
    using Widget,
    text: string,
    scale: f32,
}

label_event_handler :: fn(gui: *GuiState, this: *Widget, event: Event) -> int {
    if this.invisible return 0;

	label := @*Label this;
	match event.type {
        .Draw: {
			pos := get_absolute_position (event.data.draw.offset, this.pos);
            push_cmd(gui, cmd_drawbox(gui, .{pos, label.size}, .{0, 1, 1, 1}));
            push_cmd(gui, cmd_drawtext(gui, label.text, pos, label.scale));
        }
    };

    return default_event_handler(gui, this, event);
}

create_label :: fn(gui: *GuiState, text: string, scale: f32) -> *Label {
	label := make_widget(gui, Label);

    y_size :: cast(i32, 10);
    x_size := cast(i32, cast(f32, text.count * 25) * scale);

	label.text = text;
    label.scale = scale;
	label.size.x = x_size;
	label.size.y = y_size;
	label.handle_event = label_event_handler;
	
	return label;
}

