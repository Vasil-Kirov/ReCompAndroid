module gui

#import vmath as *
#import log

enum Direction {
	Horizontal,
	Vertical,
}

enum Justify {
	Start,
	End,
	SpaceEvenly,
}

struct Flexbox {
	using Widget,
	direction: Direction,
	justify: Justify,
	gap: f32,
}

create_flexbox :: fn(gui: *GuiState, direction: Direction, justify: Justify, gap: f32) -> *Flexbox {
	MAX_CHILDREN :: 32;

	flexbox := make_widget(gui, Flexbox);
	flexbox.handle_event = flexbox_event_handler;
	flexbox.direction = direction;
	flexbox.justify = justify;
	flexbox.gap = gap;

	flexbox.children = alloc_children(gui, MAX_CHILDREN);
	flexbox.child_capacity = MAX_CHILDREN;

	return flexbox;
}

flexbox_get_child_size :: fn(gui: *GuiState, this: *Widget, child_idx: int) -> iv2 {
	#assert this.children.count > child_idx;

	xsize_event: Event;
	xsize_event.type = EventType.GetSize_X;

	x_size := this.handle_event(gui, this.children[child_idx], xsize_event);

	ysize_event: Event;
	ysize_event.type = EventType.GetSize_Y;
	y_size := this.handle_event(gui, this.children[child_idx], ysize_event);

	return iv2 { @i32 x_size, @i32 y_size };
}

flexbox_event_handler :: fn(gui: *GuiState, this: *Widget, event: Event) -> int {
    if this.invisible return 0;

	flexbox := @*Flexbox this;

	if event.type == EventType.Resize {
		flexbox.size = event.data.resize.size;
		log.info("Flexbox: %", flexbox.size);

		main_pos := 0.0;
		cross_pos := flexbox.gap;
		if flexbox.justify == Justify.Start {
			for child_i, child in flexbox.children {
				main_pos += flexbox.gap;

				size := flexbox_get_child_size(gui, this, child_i);

				if flexbox.direction == Direction.Horizontal {
					child.pos = v2 { main_pos, cross_pos };
					main_pos += size.x;
				} else {
					child.pos = v2 { cross_pos, main_pos };
					main_pos += size.y;
				}

				resize_event: Event;
				resize_event.type = EventType.Resize;
				resize_event.data.resize.size.x = @f32 size.x;
				resize_event.data.resize.size.y = @f32 size.y;

				child.handle_event(gui, child, resize_event);
			}

		} else if flexbox.justify == .End {
			if flexbox.direction == Direction.Horizontal {
				main_pos = flexbox.size.x;
			} else {
				main_pos = flexbox.size.y;
			}


			for child_i, child in flexbox.children {
				main_pos -= flexbox.gap;

				size := flexbox_get_child_size(gui, this, child_i);

				if flexbox.direction == Direction.Horizontal {
					main_pos -= size.x;
					child.pos = v2 { main_pos, cross_pos };
				} else {
					main_pos -= size.y;
					child.pos = v2 { cross_pos, main_pos };
				}

				resize_event: Event;
				resize_event.type = EventType.Resize;
				resize_event.data.resize.size.x = @f32 size.x;
				resize_event.data.resize.size.y = @f32 size.y;

				child.handle_event(gui, child, resize_event);
			}

		} else {
			#assert false && "Justify mode not implemented";
		}
		return 0;
	}
	return default_event_handler(gui, this, event);
}

