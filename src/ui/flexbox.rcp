module gui

#import vmath as *
#import log

enum Direction {
	Horizontal,
	Vertical,
}

enum Justify {
	Start,
	End,
	SpaceEvenly,
}

struct Flexbox {
	using Widget,
	direction: Direction,
	justify: Justify,
	gap: f32,
}

create_flexbox :: fn(gui: *GuiState, direction: Direction, justify: Justify, gap: f32, flags: WidgetFlags = .NoFlags) -> *Flexbox {
	MAX_CHILDREN :: 32;

	flexbox := make_widget(gui, Flexbox, flags);
    flexbox.identify = fn() -> string { return "Flexbox"; };
	flexbox.handle_event = flexbox_event_handler;
	flexbox.direction = direction;
	flexbox.justify = justify;
	flexbox.gap = gap;

	flexbox.children = alloc_children(gui, MAX_CHILDREN);
	flexbox.child_capacity = MAX_CHILDREN;

	return flexbox;
}

flexbox_get_child_size :: fn(gui: *GuiState, flexbox: *Flexbox, child_idx: int) -> iv2 {
	#assert flexbox.children.count > child_idx;

	xsize_event: Event;
	xsize_event.type = EventType.Measure_X;

	x_size := flexbox.handle_event(gui, flexbox.children[child_idx], xsize_event);

	ysize_event: Event;
	ysize_event.type = EventType.Measure_Y;
	y_size := flexbox.handle_event(gui, flexbox.children[child_idx], ysize_event);

	return iv2 { @i32 x_size, @i32 y_size };
}


flexbox_event_handler :: fn(gui: *GuiState, this: *Widget, event: Event) -> int {
    if this.invisible return 0;

    flexbox := @*Flexbox this;

	match event.type {
		.Layout: {
            flexbox.pos = event.data.layout.pos;
			flexbox.size = event.data.layout.size;
			calculate_flexbox_size(gui, flexbox);
			return 0;
		}
		.Measure_X: {

            if flexbox.size.x != 0
                return cast(int, flexbox.size.x);

            gap := flexbox.gap;

            is_main_axis := flexbox.direction == .Horizontal;
            children_size := 0.0;
            for child in flexbox.children {
                xsize_event: Event;
                xsize_event.type = EventType.Measure_X;

                x_size := cast(f32, flexbox.handle_event(gui, child, xsize_event));
                if is_main_axis {
                    children_size += x_size;
                } else {
                    children_size = if children_size < x_size x_size else children_size;
                }
            }

            if is_main_axis {
                children_size += gap * cast(f32, flexbox.children.count + 1);
            }
            else {
                children_size += gap * 2;
            }

            return cast(int, children_size);
		}
		.Measure_Y: {
            if flexbox.size.y != 0
			    return cast(int, flexbox.size.y);

            gap := flexbox.gap;

            is_main_axis := flexbox.direction == .Vertical;
            children_size := 0.0;
            for child in flexbox.children {
                xsize_event: Event;
                xsize_event.type = EventType.Measure_Y;

                y_size := cast(f32, flexbox.handle_event(gui, child, xsize_event));
                if is_main_axis {
                    children_size += y_size;
                } else {
                    children_size = if children_size < y_size y_size else children_size;
                }
            }

            if is_main_axis {
                children_size += gap * cast(f32, flexbox.children.count + 1);
            }
            else {
                children_size += gap * 2;
            }

            return cast(int, children_size);
		}
        
        // .Draw: {
		// 	pos := get_absolute_position (event.data.draw.offset, this.pos);
        //     push_cmd(gui, cmd_drawbox(gui, .{pos, this.size}, .{0, 0.4, 1, 1}, true));
        // }
	};

    return default_event_handler(gui, this, event);
}

calculate_flexbox_size :: fn(gui: *GuiState, flexbox: *Flexbox) {
    main_pos := 0.0;
    cross_middle := 0.0;
    if flexbox.direction == .Horizontal {
        cross_middle = flexbox.size.y / 2;
    } else {
        cross_middle = flexbox.size.x / 2;
    }
    match flexbox.justify {
        .Start: {
            for child_i, child in flexbox.children {
                main_pos += flexbox.gap;

                size := flexbox_get_child_size(gui, flexbox, child_i);
                child_pos: v2;

                if flexbox.direction == Direction.Horizontal {
                    child_pos = v2 { main_pos, cross_middle - size.y/2 };
                    main_pos += size.x;
                } else {
                    child_pos = v2 { cross_middle - size.x/2, main_pos };
                    main_pos += size.y;
                }

                layout_event: Event;
                layout_event.type = .Layout;
                layout_event.data.layout.size.x = cast(f32, size.x);
                layout_event.data.layout.size.y = cast(f32, size.y);
                layout_event.data.layout.pos = child_pos;

                child.handle_event(gui, child, layout_event);
            }

        }
        .End: {
            if flexbox.direction == Direction.Horizontal {
                main_pos = flexbox.size.x;
            } else {
                main_pos = flexbox.size.y;
            }


            for child_i, child in flexbox.children {
                main_pos -= flexbox.gap;

                size := flexbox_get_child_size(gui, flexbox, child_i);
                child_pos: v2;

                if flexbox.direction == Direction.Horizontal {
                    main_pos -= size.x;
                    child_pos = v2 { main_pos, cross_middle - size.y/2 };
                } else {
                    main_pos -= size.y;
                    child_pos = v2 { cross_middle - size.x/2, main_pos };
                }

                layout_event: Event;
                layout_event.type = .Layout;
                layout_event.data.layout.size.x = cast(f32, size.x);
                layout_event.data.layout.size.y = cast(f32, size.y);
                layout_event.data.layout.pos = child_pos;

                child.handle_event(gui, child, layout_event);
            }

        }
        .SpaceEvenly: {
            child_size := cast(i32, 0);
            flexbox_size := cast(f32, 0);

            if flexbox.direction == Direction.Horizontal {
                flexbox_size = flexbox.size.x;
            }
            else {
                flexbox_size = flexbox.size.y;
            }

            for child_i, child in flexbox.children {
                size := flexbox_get_child_size(gui, flexbox, child_i);
                if flexbox.direction == Direction.Horizontal {
                    child_size += size.x;
                } else {
                    child_size += size.y;
                }
            }

            total_gap_space := cast(i32, flexbox_size) - child_size;
            if total_gap_space < 0 {
                total_gap_space = 0;
            }

            gap_space := cast(f32, total_gap_space) / (cast(f32, flexbox.children.count) + 1.0);
            for child_i, child in flexbox.children {
                main_pos += gap_space;

                size := flexbox_get_child_size(gui, flexbox, child_i);
                child_pos: v2;

                if flexbox.direction == Direction.Horizontal {
                    child_pos = v2 { main_pos, cross_middle - size.y / 2 };
                    main_pos += size.x;
                } else {
                    child_pos = v2 { cross_middle - size.x / 2, main_pos };
                    main_pos += size.y;
                }

                layout_event: Event;
                layout_event.type = .Layout;
                layout_event.data.layout.size.x = cast(f32, size.x);
                layout_event.data.layout.size.y = cast(f32, size.y);
                layout_event.data.layout.pos = child_pos;

                child.handle_event(gui, child, layout_event);
            }
        }
        _: {
            #assert false && "Justify mode not implemented";
        }
    };
}
