module gui;

#import vmath as *
#import log
#import io

struct GraphPoint {
    time: f32,
    value: f32,
}

struct HoverItem {
    xy: v2,
    point: GraphPoint,
    valid: bool,
}

struct Graph {
    using Widget,
    points: []GraphPoint,
    y_top: f32,
    label: string,
    vertical_lines: int,
    x_label: string,
    y_label: string,
    mouse_in_rect: v2,
}

sort_graph :: fn(points: []GraphPoint) {
    points := points;
    for i, point in points {
        for j := i + 1; j < points.count; j += 1 {
            if point.time > points[j].time {
                points[i] = points[j];
                points[j] = point;
            }
        }
    }
}

create_graph :: fn(gui: *GuiState, points: []GraphPoint, label: string, x_label: string, y_label: string, size: v2, y_max: f32, line_count: int = 11, flags: WidgetFlags = .NoFlags) -> *Graph {
    graph := make_widget(gui, Graph, flags);

    graph.label = label;
    graph.x_label = x_label;
    graph.y_label = y_label;
    graph.handle_event = graph_event_handler;
    graph.y_top = y_max;
    graph.size = size;
    graph.vertical_lines = line_count;
    graph.mouse_in_rect = .{-1, -1};

    set_graph_points(graph, points);

    return graph;
}

set_graph_points :: fn(graph: *Graph, points: []GraphPoint) {
    sort_graph(points);
    graph.points = points;
}

graph_event_handler :: fn(gui: *GuiState, this: *Widget, event: Event) -> int {
    if this.invisible return 0;

    graph := cast(*Graph, this);
    match event.type {
        .Draw: {
			pos := get_absolute_position (event.data.draw.offset, graph.pos);

            // background
            push_cmd(gui, cmd_drawbox(gui, .{pos, graph.size}, theme.bg_dark));

            TITLE_OFFSET :: cast(f32, 4);

            gap := min(graph.size.x / 15.0, graph.size.y / 15.0);


            // 
            // Calculate minimal and maximum value
            //

            steps := cast(f32, graph.vertical_lines);
            step_y := graph.y_top / (steps-1.0);
            if step_y == 0 return 0;


            left := pos.x + gap * 6;
            right := pos.x + graph.size.x - gap;
            top := pos.y + gap;
            bottom := pos.y + graph.size.y - gap;
            lb := v2 { left, bottom };
            lt := v2 { left, top };
            rb := v2 { right, bottom };
            rt := v2 { right, top };

            // Title
            title_pos := v2 {lerp(lb.x, rb.x, 0.5), pos.y + gap};
            push_cmd(gui, cmd_drawtext(gui, graph.label, title_pos, 1.0, true));

            //push_cmd(gui, cmd_drawcircle(gui, pos, 5.0, theme.error));
            //push_cmd(gui, cmd_drawcircle(gui, pos+graph.size, 5.0, theme.error));
            //push_cmd(gui, cmd_drawbox(gui, .{pos, this.size}, theme.error, true));

            line_step := (lb.y - lt.y) / steps;

            top_line := lt.y + line_step;

            // horizontal lines
            {
                at := lb;

                for i in cast(int, steps) {
                    to := v2 { right, at.y };

                    push_cmd(gui, cmd_drawline(gui, at, to, theme.secondary));
                    at.y -= line_step;
                }
            }

            // y values
            {
                at := v2 { pos.x + gap * 3, lb.y - 2.5 };

                for y := 0.0; y <= graph.y_top; y += step_y {
                    text := io.sprint("%", y);
                    push_cmd(gui, cmd_drawtext(gui, text, at, .75, true));
                    at.y -= line_step;
                }
            }

            hovered := HoverItem {};
            // lines & points
            if graph.points.count > 0 {
                beg_t := graph.points[0].time;
                end_t := graph.points[graph.points.count-1].time;
                //x_scale := (rb.x - lb.x) / (end_t - beg_t);
                //y_scale := (lb.y - top_line) / (max_y - min_y);

                x_scale := end_t - beg_t;
                y_scale := graph.y_top;

                start := lb;
                for i, point in graph.points {
                    //x := lb.x + (point.time * x_scale);
                    //y := lb.y - (point.value * y_scale);
                    x_t := (point.time-beg_t)  / x_scale;
                    y_t := point.value / y_scale;
                    x := lerp(lb.x, rb.x, x_t);
                    y := lerp(top_line, lb.y, 1-y_t);
                    if i + 1 != graph.points.count {
                        next_point := graph.points[i+1];

                        nx_t := (next_point.time-beg_t)  / x_scale;
                        ny_t := next_point.value / y_scale;
                        nx := lerp(lb.x, rb.x, nx_t);
                        ny := lerp(top_line, lb.y, 1-ny_t);

                        push_cmd(gui, cmd_drawline(gui, .{x, y}, .{nx, ny}, theme.surface, 2));
                    }
                    push_cmd(gui, cmd_drawcircle(gui, .{x, y}, 5.0, theme.success));
                    if graph.mouse_in_rect.x > 0 {
                        if is_point_in_rect(graph.mouse_in_rect, .{x, y} - pos - .{10, 10}, .{50, 50}) {
                            hovered.point = point;
                            hovered.xy = .{x, y};
                            hovered.valid = true;
                        }
                    }
                }
            }

            //push_cmd(gui, cmd_drawtext(gui, io.sprint("%", graph.mouse_in_rect), .{100, 100}, 1.0));

            if hovered.valid {
                box_size := v2 {100, 20};
                // @TODO: offscreen boxes
                box_pos := hovered.xy - box_size / .{2, .9};
                push_cmd(gui, cmd_drawbox(gui, .{box_pos, box_size}, theme.primary));
                text := io.sprint("%t", hovered.point.time);
                push_cmd(gui, cmd_drawtext(gui, text, box_pos+box_size/.{2, 2}, 1.0, true));
            }
        }
        .MouseMove: {
			mouse := event.data.mouse_move.mouse;
			if is_point_in_rect(mouse, graph.pos, graph.size) {
                graph.mouse_in_rect = mouse;
			}
			else {
                graph.mouse_in_rect = .{-1, -1};
			}
        }
    };
    
    return default_event_handler(gui, this, event);

}

