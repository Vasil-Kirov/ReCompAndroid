module gui;

#import vmath as *
#import log
#import io

struct GraphPoint {
    time: f32,
    value: f32,
}

struct Graph {
    using Widget,
    points: []GraphPoint,
    label: string,
    x_label: string,
    y_label: string,
}

sort_graph :: fn(points: []GraphPoint) {
    points := points;
    for i, point in points {
        for j := i + 1; j < points.count; j += 1 {
            if point.time > points[j].time {
                points[i] = points[j];
                points[j] = point;
            }
        }
    }
}

create_graph :: fn(gui: *GuiState, points: []GraphPoint, label: string, x_label: string, y_label: string, size: v2, flags: WidgetFlags = .NoFlags) -> *Graph {
    graph := make_widget(gui, Graph, flags);

    graph.label = label;
    graph.x_label = x_label;
    graph.y_label = y_label;
    graph.handle_event = graph_event_handler;
    graph.size = size;

    set_graph_points(graph, points);

    return graph;
}

set_graph_points :: fn(graph: *Graph, points: []GraphPoint) {
    sort_graph(points);
    graph.points = points;
}

graph_event_handler :: fn(gui: *GuiState, this: *Widget, event: Event) -> int {
    if this.invisible return 0;

    graph := cast(*Graph, this);
    match event.type {
        .Draw: {
			pos := get_absolute_position (event.data.draw.offset, graph.pos);

            // background
            push_cmd(gui, cmd_drawbox(gui, .{pos, graph.size}, theme.bg_dark));

            TITLE_OFFSET :: cast(f32, 4);

            gap := min(graph.size.x / 15.0, graph.size.y / 15.0);

            // Title
            title_pos := v2 {pos.x + graph.size.x / 2, pos.y + gap /* TITLE_OFFSET*/};
            push_cmd(gui, cmd_drawtext(gui, graph.label, title_pos, 1.0, true));

            // 
            // Calculate minimal and maximum value
            //

            min_y := 0.0;
            max_y := 0.0;
            for point in graph.points {
                min_y = min(point.value, min_y);
                max_y = max(point.value, max_y);
            }
            step_y := (max_y - min_y) / 10.0;


            left := pos.x + gap * 5;
            right := pos.x + graph.size.x - gap;
            top := pos.y + gap * TITLE_OFFSET * 2;
            bottom := pos.y + graph.size.y - gap;
            lb := v2 { left, bottom };
            lt := v2 { left, top };
            rb := v2 { right, bottom };
            rt := v2 { right, top };

            line_step := (graph.size.y - gap * 2) / 10.0;

            // horizontal lines
            {
                at := lb;

                for y := min_y; y < max_y; y += step_y {
                    to := v2 { right, at.y };

                    push_cmd(gui, cmd_drawline(gui, at, to, theme.secondary));
                    at.y -= line_step;
                }
            }

            // y values
            {
                at := lb;
                at.x -= gap * 5;
                at.y -= 2.5;

                for y := min_y; y < max_y; y += step_y {
                    text := io.sprint("%", y);
                    push_cmd(gui, cmd_drawtext(gui, text, at, .75));
                    at.y -= line_step;
                }
            }

            // lines
            if graph.points.count > 0 {
                beg_t := graph.points[0].time;
                end_t := graph.points[graph.points.count-1].time;
                x_scale := (rb.x - lb.x) / (end_t - beg_t);
                y_scale := (lb.y - lt.y) / (max_y - min_y);

                start := lb;
                for i, point in graph.points {
                    x := lb.x + (point.time * x_scale);
                    y := lb.y - (point.value * y_scale);
                    if i + 1 != graph.points.count {
                        next_point := graph.points[i+1];
                        nx := lb.x + (next_point.time  * x_scale);
                        ny := lb.y - (next_point.value * y_scale);

                        push_cmd(gui, cmd_drawline(gui, .{x, y}, .{nx, ny}, theme.surface, 2));
                    }
                    push_cmd(gui, cmd_drawcircle(gui, .{x, y}, 5.0, theme.success));
                }
            }
        }
    };
    
    return default_event_handler(gui, this, event);

}

