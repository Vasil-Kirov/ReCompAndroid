module gui;

#import vmath as *
#import log
#import shader as *

struct Button {
	using Widget,
	text: string,
	hovered: bool,
	text_scale: f32,
	animate_t: f32,
	on_click: ?*fn(this: *Button),
	user_data: ?*,
}

button_event_handler :: fn(gui: *GuiState, this: *Widget, event: Event) -> int {
    if this.invisible return 0;

	button := @*Button this;
	match event.type {
		EventType.Layout: {
            button.pos  = event.data.layout.pos;
			button.size = event.data.layout.size;
			return 0;
		}
		EventType.Draw: {
			pos := get_absolute_position (event.data.draw.offset, this.pos);
			//pos.y -= button.size.y;

            double_size := button.size * v2{2};
            double_pos_offset := pos - button.size / v2 {2};
            
            button_color := theme.primary * v4 {1-eo_cubic(button.animate_t)};
			button_color.w = 1.0;

            text_pos := pos + button.size / .{2, 2};
			//text_pos.y -= measure_label(button.text, button.text_scale).y / 4;

            shader := gradient(highlight(button_color), button_color);
            //shader := gradient(theme.success, theme.error);
            //push_cmd(gui, cmd_drawbox(gui, .{border, border_size}, shadow));
            //push_cmd(gui, cmd_drawshader(gui, .{border, border_size}, shadow()));
            push_cmd(gui, cmd_drawshader(gui, .{double_pos_offset, double_size}, button_shd(button_color)));
            push_cmd(gui, cmd_drawtext(gui, button.text, text_pos, button.text_scale, true));

			button.animate_t = clamp(button.animate_t - 0.15, 0, 1);
		}
		EventType.MouseMove: {
			mouse := event.data.mouse_move.mouse;
			if is_point_in_rect(mouse, button.pos, button.size) {
				button.hovered = true;
			}
			else {
				button.hovered = false;
			}
		}
		EventType.MouseClicked: {
			if button.hovered && button.on_click {
				button.animate_t = 0.5;
				button.on_click(button);
			}
            button.hovered = false;
		}
	};

	return default_event_handler(gui, this, event);
}

create_button :: fn(gui: *GuiState, text: string, size: v2 = .{120, 20}, text_scale: f32 = 1.0, flags: WidgetFlags = .NoFlags) -> *Button {
	button := make_widget(gui, Button, flags);
    button.identify = fn() -> string { return "Button"; };
	button.text = text;
    button.size = size;
	button.handle_event = button_event_handler;
	button.hovered = false;
	button.text_scale = text_scale;
	button.animate_t = 0.0;
	
	return button;
}

