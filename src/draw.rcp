module draw;

#import sem
#import intrin as *;
#import shader as *;
#import vmath as *;
#import mem
#import log

struct Rect {
    x: int,
    y: int,
    width: int,
    height: int,
}

struct Renderer {
    alloc: *mem.Allocator,
    backbuffer: ?*Texture,
}

renderer: Renderer;

struct Texture {
    pixels: *v4,
    width: int,
    height: int,
}

tex_to_v2 :: fn(t: *Texture) -> v2 {
    return .{cast(f32, t.width), cast(f32, t.height)};
}

v2_to_rect :: fn(xy: v2, size: v2) -> Rect {
    return .{
        x = cast(int, xy.x),
        y = cast(int, xy.y),
        width  = cast(int, size.x),
        height = cast(int, size.y),
    };
}

make_renderer :: fn(allocator: *mem.Allocator) -> Renderer {
    return .{
        allocator,
        null,
    };
}

allocate_texture :: fn(width: int, height: int) -> ?*Texture {
    r := &renderer;
    ptr := r.alloc.alloc(width * height * size_of v4, r.alloc);
    if ptr == null return null;
    tex_ := mem.make_type(Texture, r.alloc);
    if tex_ == null {
        r.alloc.free(?ptr, r.alloc);
        return null;
    }

    tex := ?tex_;

    tex.pixels = ?ptr;
    tex.width = width;
    tex.height = height;
    return tex;
}

free_texture :: fn(t: *Texture) {
    r := &renderer;
    r.alloc.free(t.pixels, r.alloc);
    r.alloc.free(t, r.alloc);
}

copy_rect_no_rescaling :: fn(dst_: ?*Texture, src_: ?*Texture, dst_rect: Rect, src_rect: Rect) {
    if dst_ == null return;
    if src_ == null return;
    dst := ?dst_;
    src := ?src_;

    #assert dst_rect.width  == src_rect.width  && "Resizing is not supported";
    #assert dst_rect.height == src_rect.height && "Resizing is not supported";

    dst_at := dst.pixels + dst_rect.x + (dst_rect.y * dst.width);
    src_at := src.pixels + src_rect.x + (src_rect.y * src.width);

    for y in dst_rect.height {
        for x in dst_rect.width {
            pixel := src_at[x];
            if pixel.w == 0 continue;
            dst_at[x] = pixel;
        }
        dst_at += dst.width;
        src_at += src.width;
    }
}


copy_rect :: fn(dst_: ?*Texture, src_: ?*Texture, dst_rect: Rect, src_rect: Rect) {
    if dst_ == null return;
    if src_ == null return;
    dst := ?dst_;
    src := ?src_;
	src_rect := src_rect;
	dst_rect := dst_rect;

	if src_rect.width == 0 && src_rect.height == 0 {
		src_rect.width = src.width;
		src_rect.height = src.height;
	}

	if dst_rect.width == 0 && dst_rect.height == 0 {
		dst_rect.width = dst.width;
		dst_rect.height = dst.height;
	}

    dst_rect = clamp_rect(dst, dst_rect);
    src_rect = clamp_rect(src, src_rect);

    if dst_rect.width == src_rect.width && dst_rect.height == src_rect.height {
        copy_rect_no_rescaling(dst, src, dst_rect, src_rect);
        return;
    }


    src_h := src.height;
    src_w := src.width;
    src_pixels := src.pixels;

    scale_x := cast(f32, src_rect.width) / cast(f32, dst_rect.width);
    scale_y := cast(f32, src_rect.height) / cast(f32, dst_rect.height);

    y_off := 0.0;
    for y in dst_rect.height {
        y_int_off := cast(int, y_off);

        dst_y := dst_rect.y + y;
        src_y := src_rect.y + y_int_off;
        dst_row := dst.pixels + dst_rect.x + dst_y * dst.width;
        src_row := src.pixels + src_rect.x + src_y * src.width;

        x_off := 0.0;
        for x in dst_rect.width {
            x_int_off := cast(int, x_off);
            x_off += scale_x;

            pixel := src_row[x_int_off];
            if pixel.w == 0 continue;

            dst_row[x] = pixel;
        }
        y_off += scale_y;
    }
}

struct CycleTracker {
    name: string,
    cycles: int,
}

highest_cycles: CycleTracker;

profile_fn :: fn(name: string, cycles: int) {
    /*
    if cycles > highest_cycles.cycles {
        highest_cycles = .{name, cycles};
    }
    spaces := [256]u8{};
    RIGHT_PAD :: 24;
    for i in RIGHT_PAD spaces[i] = ' ';
    for i in name.count spaces[RIGHT_PAD-i] = '\0';

    log.info("%:%s% cycles", name, &spaces[0], cycles);
    */
}


draw_color :: fn(dst_: ?*Texture, rect: Rect, color: v4, no_fill: bool = false) {
    if dst_ == null return;
    dst := ?dst_;

    rect := clamp_rect(dst, rect);

    dst_at := dst.pixels + rect.x + (rect.y * dst.width);
    if no_fill {
        for y in rect.height {
            for x in rect.width {
                if x + 1 == rect.width || y + 1 == rect.height || x == 0 || y == 0
                    dst_at[x] = color;
            }
            dst_at += dst.width;
        }
        return;
    }
    for y in rect.height {
        for x in rect.width {
            dst_at[x] = color;
        }
        dst_at += dst.width;
    }
}

struct Job {
    do: *fn(data: ?*),
    data: ?*,
}

MAX_JOBS :: 16384;
struct ThreadQueue {
    completed_jobs: int,
    at_job: int,
    job_count: int,
    post_job_idx: int,
    semaphore: sem.sem_t,
    jobs: [16384]Job,
}

struct ShaderJobData {
    uniforms: Uniforms,
    rect: Rect,
    shader: Shader,
    y: int,
    u_mult: f32,
    v_mult: f32,
    dst_at: *v4,
}

SHADER_THREAD_COUNT :: 8;
threads := [8]int{};
thread_queue: ThreadQueue;

try_do_work :: fn() -> bool {
    original_at_job := atomic_load(&thread_queue.at_job);
    job_count := atomic_load(&thread_queue.job_count);
    if job_count > original_at_job {
        _, success := compare_exchange(&thread_queue.at_job, original_at_job, original_at_job+1);
        if success {
            job_index := original_at_job;
            job := thread_queue.jobs[job_index % MAX_JOBS];
            job.do(job.data);
            atomic_add(&thread_queue.completed_jobs, 1);
        }
        return true;
    }
	return false;
}

enqueue_job :: fn(job: Job) {
    job_idx := thread_queue.job_count;
    thread_queue.jobs[job_idx % MAX_JOBS] = job;
    fence();
    atomic_add(&thread_queue.job_count, 1);
    sem.post(&thread_queue.semaphore);
}

shader_draw_thread_fn :: fn(unused: ?*) -> ?* {

    for {
        if !try_do_work() {
            sem.wait(&thread_queue.semaphore);
        }
    }

    return null;
}

wait_for_jobs_and_do_work :: fn() {
    for thread_queue.job_count > atomic_load(&thread_queue.completed_jobs) {
        try_do_work();
    }
}

@profile=profile_fn
draw_with_shader :: fn(dst_: ?*Texture, rect: Rect, shader: Shader) {
    if dst_ == null return;
    dst := ?dst_;

    rect := rect;

    if rect.width == 0 rect.width = dst.width;
    if rect.height == 0 rect.height = dst.height;

    rect = clamp_rect(dst, rect);
    if rect.width == 0 || rect.height == 0 return;

    u_mult := 1.0 / cast(f32, rect.width);
    v_mult := 1.0 / cast(f32, rect.height);

    dst_at := dst.pixels + rect.x + (rect.y * dst.width);
    uniforms := Uniforms {
        resolution = v2 { cast(f32, rect.width), cast(f32, rect.height) },
    };

    #assert rect.height < 640;
    job_data := [640]ShaderJobData{};


    for y in rect.height {
        job_data[y] = ShaderJobData {
            uniforms = uniforms,
            rect = rect,
            shader = shader,
            y = y,
            u_mult = u_mult,
            v_mult = v_mult,
            dst_at = dst_at,
        };
        job := Job {
            fn(data: ?*) {
                #assert data;
                job_data := *cast(*ShaderJobData, ?data);
                using job_data;

                for x in rect.width {
                    uv := v2 {cast(f32, x) * u_mult, cast(f32, y) * v_mult};
                    uniforms.uv = uv;
                    uniforms.frag_coord = v2 { cast(f32, x), cast(f32, y) };
                    uniforms.dst_pixel = dst_at[x];
                    dst_at[x] = shader.pixel(uniforms, shader.user_data);
                }

            },
            &job_data[y],
        };
        enqueue_job(job);
        dst_at += dst.width;
    }

    wait_for_jobs_and_do_work();
}

draw_circle :: fn(dst_: ?*Texture, x0: int, y0: int, r: int, color: v4) {
    if dst_ == null return;
    dst := ?dst_;

    x := r;
    y := 0;
    decision := 1 - x;
    for y <= x {
        draw_line(dst, x0 - x, y0 + y, x0 + x, y0 + y, color, 1);
        draw_line(dst, x0 - x, y0 - y, x0 + x, y0 - y, color, 1);
        draw_line(dst, x0 - y, y0 + x, x0 + y, y0 + x, color, 1);
        draw_line(dst, x0 - y, y0 - x, x0 + y, y0 - x, color, 1);

        y += 1;
        if decision <= 0 {
            decision += 2 * y + 1;
        } else {
            x -= 1;
            decision += 2 * (y - x) + 1;
        }
    }
}

draw_line :: fn(dst_: ?*Texture, x0: int, y0: int, x1: int, y1: int, color: v4, thickness: int) {
    if dst_ == null return;
    dst := ?dst_;

    dx := abs(x1 - x0);
    dy := abs(y1 - y0);
    err := dx-dy;
    sx := if x0 < x1 then 1 else -1;
    sy := if y0 < y1 then 1 else -1;

    x := x0;
    y := y0;
    for {
        dst.pixels[y * dst.width + x] = color;
        // thickness
        {
            for dy := -thickness; dy <= thickness; dy+=1 {
                for dx := -thickness; dx <= thickness; dx+=1 {
                    px := x + dx;
                    py := y + dy;
                    if px >= 0 && px < dst.width && py >= 0 && py < dst.height {
                        dst.pixels[py * dst.width + px] = color;
                    }
                }
            }
        }
        if x == x1 && y == y1 break;
        e2 := 2*err;
        if e2 > -dy { err -= dy; x += sx; }
        if e2 < dx { err += dx; y += sy; }
    }
}

clamp_rect :: fn(tex: *Texture, rect: Rect) -> Rect {
    x := clamp(rect.x, 0, tex.width);
    y := clamp(rect.y, 0, tex.height);
    return .{
        x,
        y,
        clamp(rect.width, 0, tex.width - x),
        clamp(rect.height, 0, tex.height - y),
    };
}


get_screen_size :: fn() -> v2 {
    if renderer.backbuffer == null return .{};
    width  := cast(f32, (?renderer.backbuffer).width);
    height := cast(f32, (?renderer.backbuffer).height);
    return .{width, height};
}

