module draw;

#import vmath as *;
#import mem
#import log

struct Rect {
    x: int,
    y: int,
    width: int,
    height: int,
}

struct Renderer {
    alloc: *mem.Allocator,
    backbuffer: ?*Texture,
}

renderer: Renderer;

struct Texture {
    pixels: *u32,
    width: int,
    height: int,
}

tex_to_v2 :: fn(t: *Texture) -> v2 {
    return .{cast(f32, t.width), cast(f32, t.height)};
}

v2_to_rect :: fn(xy: v2, size: v2) -> Rect {
    return .{
        x = cast(int, xy.x),
        y = cast(int, xy.y),
        width  = cast(int, size.x),
        height = cast(int, size.y),
    };
}

make_renderer :: fn(allocator: *mem.Allocator) -> Renderer {
    return .{
        allocator,
        null,
    };
}

allocate_texture :: fn(width: int, height: int) -> ?*Texture {
    r := &renderer;
    ptr := r.alloc.alloc(width * height * 4, r.alloc);
    if ptr == null return null;
    tex_ := mem.make_type(Texture, r.alloc);
    if tex_ == null {
        r.alloc.free(?ptr, r.alloc);
        return null;
    }

    tex := ?tex_;

    tex.pixels = ?ptr;
    tex.width = width;
    tex.height = height;
    return tex;
}

free_texture :: fn(t: *Texture) {
    r := &renderer;
    r.alloc.free(t.pixels, r.alloc);
    r.alloc.free(t, r.alloc);
}

v4_to_color :: fn(c: v4) -> u32 {
    r := cast(u32, c.x * 255.0);
    g := cast(u32, c.y * 255.0);
    b := cast(u32, c.z * 255.0);
    a := cast(u32, c.w * 255.0);
    return a << 24 | r << 16 | g << 8 | b;
}

copy_rect_no_rescaling :: fn(dst_: ?*Texture, src_: ?*Texture, dst_rect: Rect, src_rect: Rect) {
    if dst_ == null return;
    if src_ == null return;
    dst := ?dst_;
    src := ?src_;

    #assert dst_rect.width  == src_rect.width  && "Resizing is not supported";
    #assert dst_rect.height == src_rect.height && "Resizing is not supported";

    dst_at := dst.pixels + dst_rect.x + (dst_rect.y * dst.width);
    src_at := src.pixels + src_rect.x + (src_rect.y * src.width);
    // @TODO: Clipping

    dst_rect := dst_rect;
    dst_rect.width = clamp(dst_rect.x + dst_rect.width, 0, dst.width) - dst_rect.x;
    dst_rect.height = clamp(dst_rect.y + dst_rect.height, 0, dst.height) - dst_rect.y;

    src_rect := src_rect;
    src_rect.width = clamp(src_rect.x + src_rect.width, 0, src.width) - src_rect.x;
    src_rect.height = clamp(src_rect.y + src_rect.height, 0, src.height) - src_rect.y;

    for y in dst_rect.height {
        for x in dst_rect.width {
            pixel := src_at[x];
            if pixel & 0xFF_00_00_00 == 0 continue;
            dst_at[x] = pixel;
        }
        dst_at += dst.width;
        src_at += src.width;
    }
}

copy_rect :: fn(dst_: ?*Texture, src_: ?*Texture, dst_rect: Rect, src_rect: Rect) {
    if dst_ == null return;
    if src_ == null return;
    dst := ?dst_;
    src := ?src_;
	src_rect := src_rect;
	dst_rect := dst_rect;

	if src_rect.width == 0 && src_rect.height == 0 {
		src_rect.width = src.width;
		src_rect.height = src.height;
	}

	if dst_rect.width == 0 && dst_rect.height == 0 {
		dst_rect.width = dst.width;
		dst_rect.height = dst.height;
	}

    if dst_rect.width == src_rect.width && dst_rect.height == src_rect.height {
        copy_rect_no_rescaling(dst, src, dst_rect, src_rect);
        return;
    }


    src_h := src.height;
    src_w := src.width;
    src_pixels := src.pixels;

    scale_x := cast(f32, src_rect.width) / cast(f32, dst_rect.width);
    scale_y := cast(f32, src_rect.height) / cast(f32, dst_rect.height);

    y_off := 0.0;
    for y in dst_rect.height {
        y_int_off := cast(int, y_off);

        dst_y := dst_rect.y + y;
        src_y := src_rect.y + y_int_off;
        dst_row := dst.pixels + dst_rect.x + dst_y * dst.width;
        src_row := src.pixels + src_rect.x + src_y * src.width;

        x_off := 0.0;
        for x in dst_rect.width {
            x_int_off := cast(int, x_off);
            x_off += scale_x;

            pixel := src_row[x_int_off];
            if pixel & 0xFF_00_00_00 == 0 {
                continue;
            }

            dst_row[x] = pixel;
        }
        y_off += scale_y;
    }
}

draw_color :: fn(dst_: ?*Texture, rect: Rect, color: u32, no_fill: bool = false) {
    if dst_ == null return;
    dst := ?dst_;

    dst_at := dst.pixels + rect.x + (rect.y * dst.width);
    if no_fill {
        for y in rect.height {
            for x in rect.width {
                if x + 1 == rect.width || y + 1 == rect.height || x == 0 || y == 0
                    dst_at[x] = color;
            }
            dst_at += dst.width;
        }
        return;
    }
    for y in rect.height {
        for x in rect.width {
            dst_at[x] = color;
        }
        dst_at += dst.width;
    }
}

draw_circle :: fn(dst_: ?*Texture, x0: int, y0: int, r: int, color: u32) {
    if dst_ == null return;
    dst := ?dst_;

    x := r;
    y := 0;
    decision := 1 - x;
    for y <= x {
        draw_line(dst, x0 - x, y0 + y, x0 + x, y0 + y, color, 1);
        draw_line(dst, x0 - x, y0 - y, x0 + x, y0 - y, color, 1);
        draw_line(dst, x0 - y, y0 + x, x0 + y, y0 + x, color, 1);
        draw_line(dst, x0 - y, y0 - x, x0 + y, y0 - x, color, 1);

        y += 1;
        if decision <= 0 {
            decision += 2 * y + 1;
        } else {
            x -= 1;
            decision += 2 * (y - x) + 1;
        }
    }
}

draw_line :: fn(dst_: ?*Texture, x0: int, y0: int, x1: int, y1: int, color: u32, thickness: int) {
    if dst_ == null return;
    dst := ?dst_;

    dx := abs(x1 - x0);
    dy := abs(y1 - y0);
    err := dx-dy;
    sx := if x0 < x1 then 1 else -1;
    sy := if y0 < y1 then 1 else -1;

    x := x0;
    y := y0;
    for {
        dst.pixels[y * dst.width + x] = color;
        // thickness
        {
            for dy := -thickness; dy <= thickness; dy+=1 {
                for dx := -thickness; dx <= thickness; dx+=1 {
                    px := x + dx;
                    py := y + dy;
                    if px >= 0 && px < dst.width && py >= 0 && py < dst.height {
                        dst.pixels[py * dst.width + px] = color;
                    }
                }
            }
        }
        if x == x1 && y == y1 break;
        e2 := 2*err;
        if e2 > -dy { err -= dy; x += sx; }
        if e2 < dx { err += dx; y += sy; }
    }
}

get_screen_size :: fn() -> v2 {
    if renderer.backbuffer == null return .{};
    width  := cast(f32, (?renderer.backbuffer).width);
    height := cast(f32, (?renderer.backbuffer).height);
    return .{width, height};
}

