module scene;

#import gui as *
#import log
#import mem

struct Scene {
    widget: *Widget,
    id: int,
    connect_label: ?*Label,
    device_name_label: ?*Label,
}

should_request_refresh := 0;

reset_request :: fn() {
	should_request_refresh = 0;
}

scene_00 :: fn(ui: *GuiState) -> Scene {
    window := create_window(ui, .{0,0}, .{ORTHO_WIDTH, ORTHO_HEIGHT});
    flexbox := create_flexbox(ui, .Vertical, .SpaceEvenly, 1);
    add_child(&window.base, &flexbox.base);
    //hello_btn := create_button(ui, "Hello");
    //hello_btn.on_click = fn(this: *Button) {
    //    log.info("Hello");
    //};
    //hello_btn2 := create_button(ui, "Hello");
    //hello_btn3 := create_button(ui, "Hello");
    //add_child(&flexbox.base, &hello_btn.base);
    //add_child(&flexbox.base, &hello_btn2.base);
    //add_child(&flexbox.base, &hello_btn3.base);


    points := mem.make_slice(GraphPoint, 8, &ui.alloc);
    points[0] = GraphPoint { 0.0, 0.0 };
    points[1] = GraphPoint { 0.5, 1.0 };
    points[2] = GraphPoint { 1.0, 5.0 };
    points[3] = GraphPoint { 4.0, 4.0 };
    points[4] = GraphPoint { 5.0, 3.0 };
    points[5] = GraphPoint { 5.5, 10.0 };
    points[6] = GraphPoint { 6.0, 9.0 };
    points[7] = GraphPoint { 8.0, 6.0 };
    graph := create_graph(ui, points, "Test Label", "X Stuff", "Y Stuff", .{ORTHO_WIDTH, 200}, 10);
    add_child(&flexbox.base, &graph.base);


    window_do_layout(ui, window);
    return .{ widget = cast(*Widget, window), id = 0 };
}

scene_01 :: fn(ui: *GuiState) -> Scene {
    window := create_window(ui, .{0,0}, .{ORTHO_WIDTH, ORTHO_HEIGHT});
    main_box := create_flexbox(ui, .Vertical, .Start, 10);
    add_child(&window.base, &main_box.base);

    lines := [4]*Flexbox{};
	line_width := cast(f32, ORTHO_WIDTH);
	line_height := cast(f32, ORTHO_HEIGHT - 20) / 4.0;
    for &line in lines {
        *line = create_flexbox(ui, .Horizontal, .SpaceEvenly, 1, .FillCross);
		(*line).size = .{line_width, 0};
    }
    for line in lines {
        add_child(&main_box.base, &line.base);
    }

    points := mem.make_slice(GraphPoint, 8, &ui.alloc);
    points[0] = GraphPoint { 0.0, 0.0 };
    points[1] = GraphPoint { 0.5, 1.0 };
    points[2] = GraphPoint { 1.0, 5.0 };
    points[3] = GraphPoint { 4.0, 4.0 };
    points[4] = GraphPoint { 5.0, 3.0 };
    points[5] = GraphPoint { 5.5, 8.0 };
    points[6] = GraphPoint { 6.0, 9.0 };
    points[7] = GraphPoint { 8.0, 6.0 };

    top_name := create_label(ui, "Smart Watch Monitor", 1.0);
    connected := create_label(ui, ":xConnected", 1.0);
    device_name := create_label(ui, "ESP32 TTGO", 1.0);
    sync_timer := create_label(ui, "Last Sync: --:--", 1.0);
    refresh_btn := create_button(ui, ":s", .{120, 20}, 2.0);
	refresh_btn.on_click = fn(this: *Button) {
		should_request_refresh = 1;
	};
    graph := create_graph(ui, points, "Test Label", "X Stuff", "Y Stuff", .{ORTHO_WIDTH, 150}, 10);
    add_child(&lines[0].base, &top_name.base);
    add_child(&lines[1].base, &connected.base);
    add_child(&lines[1].base, &device_name.base);
    add_child(&lines[2].base, &sync_timer.base);
    add_child(&lines[2].base, &refresh_btn.base);
    add_child(&lines[3].base, &graph.base);

    window_do_layout(ui, window);
    return .{ widget = cast(*Widget, window), id = 1, connect_label = connected, device_name_label = device_name, };
}

