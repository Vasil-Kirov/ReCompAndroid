module android


struct _jmethodID {
}

struct _jfieldID {
}

union jvalue {
	z: u8,
	b: i8,
	c: u16,
	s: i16,
	i: i32,
	j: i64,
	f: f32,
	d: f64,
	l: *,
}

enum jobjectRefType {
	JNIInvalidRefType = 0,
	JNILocalRefType = 1,
	JNIGlobalRefType = 2,
	JNIWeakGlobalRefType = 3,
}

struct JNINativeMethod {
	name: *u8,
	signature: *u8,
	fnPtr: *,
}

struct JNINativeInterface {
	reserved0: *,
	reserved1: *,
	reserved2: *,
	reserved3: *,
	GetVersion: *fn #foreign(a: *JNIEnv) -> i32,
	DefineClass: *fn #foreign(a: *JNIEnv, b: *u8, c: *, d: *i8, e: i32) -> *,
	FindClass: *fn #foreign(a: *JNIEnv, b: *u8) -> ?*,
	FromReflectedMethod: *fn #foreign(a: *JNIEnv, b: *) -> *_jmethodID,
	FromReflectedField: *fn #foreign(a: *JNIEnv, b: *) -> *_jfieldID,
	ToReflectedMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: u8) -> *,
	GetSuperclass: *fn #foreign(a: *JNIEnv, b: *) -> *,
	IsAssignableFrom: *fn #foreign(a: *JNIEnv, b: *, c: *) -> u8,
	ToReflectedField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: u8) -> *,
	Throw: *fn #foreign(a: *JNIEnv, b: *) -> i32,
	ThrowNew: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> i32,
	ExceptionOccurred: *fn #foreign(a: *JNIEnv) -> *,
	ExceptionDescribe: *fn #foreign(a: *JNIEnv),
	ExceptionClear: *fn #foreign(a: *JNIEnv),
	FatalError: *fn #foreign(a: *JNIEnv, b: *u8),
	PushLocalFrame: *fn #foreign(a: *JNIEnv, b: i32) -> i32,
	PopLocalFrame: *fn #foreign(a: *JNIEnv, b: *) -> *,
	NewGlobalRef: *fn #foreign(a: *JNIEnv, b: *) -> *,
	DeleteGlobalRef: *fn #foreign(a: *JNIEnv, b: *),
	DeleteLocalRef: *fn #foreign(a: *JNIEnv, b: *),
	IsSameObject: *fn #foreign(a: *JNIEnv, b: *, c: *) -> u8,
	NewLocalRef: *fn #foreign(a: *JNIEnv, b: *) -> *,
	EnsureLocalCapacity: *fn #foreign(a: *JNIEnv, b: i32) -> i32,
	AllocObject: *fn #foreign(a: *JNIEnv, b: *) -> *,
	NewObject: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> *,
	NewObjectV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> *,
	NewObjectA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> *,
	GetObjectClass: *fn #foreign(a: *JNIEnv, b: *) -> ?*,
	IsInstanceOf: *fn #foreign(a: *JNIEnv, b: *, c: *) -> u8,
	GetMethodID: *fn #foreign(a: *JNIEnv, b: *, c: *u8, d: *u8) -> ?*_jmethodID,
	CallObjectMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, arg: ?*) -> ?*,
	CallObjectMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> *,
	CallObjectMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> *,
	CallBooleanMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> u8,
	CallBooleanMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> u8,
	CallBooleanMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> u8,
	CallByteMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> i8,
	CallByteMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> i8,
	CallByteMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> i8,
	CallCharMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> u16,
	CallCharMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> u16,
	CallCharMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> u16,
	CallShortMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> i16,
	CallShortMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> i16,
	CallShortMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> i16,
	CallIntMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> i32,
	CallIntMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> i32,
	CallIntMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> i32,
	CallLongMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> i64,
	CallLongMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> i64,
	CallLongMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> i64,
	CallFloatMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> f32,
	CallFloatMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> f32,
	CallFloatMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> f32,
	CallDoubleMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> f64,
	CallDoubleMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> f64,
	CallDoubleMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> f64,
	CallVoidMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID),
	CallVoidMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8),
	CallVoidMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue),
	CallNonvirtualObjectMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> *,
	CallNonvirtualObjectMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> *,
	CallNonvirtualObjectMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> *,
	CallNonvirtualBooleanMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> u8,
	CallNonvirtualBooleanMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> u8,
	CallNonvirtualBooleanMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> u8,
	CallNonvirtualByteMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> i8,
	CallNonvirtualByteMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> i8,
	CallNonvirtualByteMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> i8,
	CallNonvirtualCharMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> u16,
	CallNonvirtualCharMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> u16,
	CallNonvirtualCharMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> u16,
	CallNonvirtualShortMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> i16,
	CallNonvirtualShortMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> i16,
	CallNonvirtualShortMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> i16,
	CallNonvirtualIntMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> i32,
	CallNonvirtualIntMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> i32,
	CallNonvirtualIntMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> i32,
	CallNonvirtualLongMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> i64,
	CallNonvirtualLongMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> i64,
	CallNonvirtualLongMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> i64,
	CallNonvirtualFloatMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> f32,
	CallNonvirtualFloatMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> f32,
	CallNonvirtualFloatMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> f32,
	CallNonvirtualDoubleMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID) -> f64,
	CallNonvirtualDoubleMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8) -> f64,
	CallNonvirtualDoubleMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue) -> f64,
	CallNonvirtualVoidMethod: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID),
	CallNonvirtualVoidMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *u8),
	CallNonvirtualVoidMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *, d: *_jmethodID, e: *jvalue),
	GetFieldID: *fn #foreign(a: *JNIEnv, b: *, c: *u8, d: *u8) -> *_jfieldID,
	GetObjectField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> *,
	GetBooleanField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> u8,
	GetByteField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> i8,
	GetCharField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> u16,
	GetShortField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> i16,
	GetIntField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> i32,
	GetLongField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> i64,
	GetFloatField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> f32,
	GetDoubleField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> f64,
	SetObjectField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: *),
	SetBooleanField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: u8),
	SetByteField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: i8),
	SetCharField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: u16),
	SetShortField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: i16),
	SetIntField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: i32),
	SetLongField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: i64),
	SetFloatField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: f32),
	SetDoubleField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: f64),
	GetStaticMethodID: *fn #foreign(a: *JNIEnv, b: *, c: *u8, d: *u8) -> ?*_jmethodID,
	CallStaticObjectMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> *,
	CallStaticObjectMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> *,
	CallStaticObjectMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> *,
	CallStaticBooleanMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> u8,
	CallStaticBooleanMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> u8,
	CallStaticBooleanMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> u8,
	CallStaticByteMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> i8,
	CallStaticByteMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> i8,
	CallStaticByteMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> i8,
	CallStaticCharMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> u16,
	CallStaticCharMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> u16,
	CallStaticCharMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> u16,
	CallStaticShortMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> i16,
	CallStaticShortMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> i16,
	CallStaticShortMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> i16,
	CallStaticIntMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> i32,
	CallStaticIntMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> i32,
	CallStaticIntMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> i32,
	CallStaticLongMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> i64,
	CallStaticLongMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> i64,
	CallStaticLongMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> i64,
	CallStaticFloatMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> f32,
	CallStaticFloatMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> f32,
	CallStaticFloatMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> f32,
	CallStaticDoubleMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID) -> f64,
	CallStaticDoubleMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8) -> f64,
	CallStaticDoubleMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue) -> f64,
	CallStaticVoidMethod: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID),
	CallStaticVoidMethodV: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *u8),
	CallStaticVoidMethodA: *fn #foreign(a: *JNIEnv, b: *, c: *_jmethodID, d: *jvalue),
	GetStaticFieldID: *fn #foreign(a: *JNIEnv, b: *, c: *u8, d: *u8) -> *_jfieldID,
	GetStaticObjectField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> *,
	GetStaticBooleanField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> u8,
	GetStaticByteField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> i8,
	GetStaticCharField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> u16,
	GetStaticShortField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> i16,
	GetStaticIntField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> i32,
	GetStaticLongField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> i64,
	GetStaticFloatField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> f32,
	GetStaticDoubleField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID) -> f64,
	SetStaticObjectField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: *),
	SetStaticBooleanField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: u8),
	SetStaticByteField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: i8),
	SetStaticCharField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: u16),
	SetStaticShortField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: i16),
	SetStaticIntField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: i32),
	SetStaticLongField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: i64),
	SetStaticFloatField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: f32),
	SetStaticDoubleField: *fn #foreign(a: *JNIEnv, b: *, c: *_jfieldID, d: f64),
	NewString: *fn #foreign(a: *JNIEnv, b: *u16, c: i32) -> *,
	GetStringLength: *fn #foreign(a: *JNIEnv, b: *) -> i32,
	GetStringChars: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *u16,
	ReleaseStringChars: *fn #foreign(a: *JNIEnv, b: *, c: *u16),
	NewStringUTF: *fn #foreign(a: *JNIEnv, b: *u8) -> *,
	GetStringUTFLength: *fn #foreign(a: *JNIEnv, b: *) -> i32,
	GetStringUTFChars: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *u8,
	ReleaseStringUTFChars: *fn #foreign(a: *JNIEnv, b: *, c: *u8),
	GetArrayLength: *fn #foreign(a: *JNIEnv, b: *) -> i32,
	NewObjectArray: *fn #foreign(a: *JNIEnv, b: i32, c: *, d: *) -> *,
	GetObjectArrayElement: *fn #foreign(a: *JNIEnv, b: *, c: i32) -> *,
	SetObjectArrayElement: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: *),
	NewBooleanArray: *fn #foreign(a: *JNIEnv, b: i32) -> *,
	NewByteArray: *fn #foreign(a: *JNIEnv, b: i32) -> *,
	NewCharArray: *fn #foreign(a: *JNIEnv, b: i32) -> *,
	NewShortArray: *fn #foreign(a: *JNIEnv, b: i32) -> *,
	NewIntArray: *fn #foreign(a: *JNIEnv, b: i32) -> *,
	NewLongArray: *fn #foreign(a: *JNIEnv, b: i32) -> *,
	NewFloatArray: *fn #foreign(a: *JNIEnv, b: i32) -> *,
	NewDoubleArray: *fn #foreign(a: *JNIEnv, b: i32) -> *,
	GetBooleanArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *u8,
	GetByteArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *i8,
	GetCharArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *u16,
	GetShortArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *i16,
	GetIntArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *i32,
	GetLongArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *i64,
	GetFloatArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *f32,
	GetDoubleArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *f64,
	ReleaseBooleanArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u8, d: i32),
	ReleaseByteArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *i8, d: i32),
	ReleaseCharArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *u16, d: i32),
	ReleaseShortArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *i16, d: i32),
	ReleaseIntArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *i32, d: i32),
	ReleaseLongArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *i64, d: i32),
	ReleaseFloatArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *f32, d: i32),
	ReleaseDoubleArrayElements: *fn #foreign(a: *JNIEnv, b: *, c: *f64, d: i32),
	GetBooleanArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *u8),
	GetByteArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *i8),
	GetCharArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *u16),
	GetShortArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *i16),
	GetIntArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *i32),
	GetLongArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *i64),
	GetFloatArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *f32),
	GetDoubleArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *f64),
	SetBooleanArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *u8),
	SetByteArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *i8),
	SetCharArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *u16),
	SetShortArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *i16),
	SetIntArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *i32),
	SetLongArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *i64),
	SetFloatArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *f32),
	SetDoubleArrayRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *f64),
	RegisterNatives: *fn #foreign(a: *JNIEnv, b: *, c: *JNINativeMethod, d: i32) -> i32,
	UnregisterNatives: *fn #foreign(a: *JNIEnv, b: *) -> i32,
	MonitorEnter: *fn #foreign(a: *JNIEnv, b: *) -> i32,
	MonitorExit: *fn #foreign(a: *JNIEnv, b: *) -> i32,
	GetJavaVM: *fn #foreign(a: *JNIEnv, b: **JavaVM) -> i32,
	GetStringRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *u16),
	GetStringUTFRegion: *fn #foreign(a: *JNIEnv, b: *, c: i32, d: i32, e: *u8),
	GetPrimitiveArrayCritical: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *,
	ReleasePrimitiveArrayCritical: *fn #foreign(a: *JNIEnv, b: *, c: *, d: i32),
	GetStringCritical: *fn #foreign(a: *JNIEnv, b: *, c: *u8) -> *u16,
	ReleaseStringCritical: *fn #foreign(a: *JNIEnv, b: *, c: *u16),
	NewWeakGlobalRef: *fn #foreign(a: *JNIEnv, b: *) -> *,
	DeleteWeakGlobalRef: *fn #foreign(a: *JNIEnv, b: *),
	ExceptionCheck: *fn #foreign(a: *JNIEnv) -> u8,
	NewDirectByteBuffer: *fn #foreign(a: *JNIEnv, b: *, c: i64) -> *,
	GetDirectBufferAddress: *fn #foreign(a: *JNIEnv, b: *) -> *,
	GetDirectBufferCapacity: *fn #foreign(a: *JNIEnv, b: *) -> i64,
	GetObjectRefType: *fn #foreign(a: *JNIEnv, b: *) -> jobjectRefType,
}

struct JNIInvokeInterface {
    reserved0: *,
    reserved1: *,
    reserved2: *,

    DestroyJavaVM: *fn(vm: *JavaVM) -> i32 #foreign,
    AttachCurrentThread: *fn(vm: *JavaVM, penv: **, args: ?*) -> i32 #foreign,
    DetachCurrentThread: *fn(vm: *JavaVM) -> i32 #foreign,
    GetEnv: *fn(vm: *JavaVM, penv: **, version: i32) -> i32 #foreign,
    AttachCurrentThreadAsDaemon: *fn(vm: *JavaVM, penv: **, args: *) -> i32 #foreign,
};

JNI_OK           :: cast(i32, ( 0));             /* success */
JNI_ERR          :: cast(i32, (-1));             /* unknown error */
JNI_EDETACHED    :: cast(i32, (-2));             /* thread detached from the VM */
JNI_EVERSION     :: cast(i32, (-3));             /* JNI version error */
JNI_ENOMEM       :: cast(i32, (-4));             /* not enough memory */
JNI_EEXIST       :: cast(i32, (-5));             /* VM already created */
JNI_EINVAL       :: cast(i32, (-6));             /* invalid arguments */

JNI_VERSION_1_1 :: cast(i32, 0x00010001);
JNI_VERSION_1_2 :: cast(i32, 0x00010002);
JNI_VERSION_1_4 :: cast(i32, 0x00010004);
JNI_VERSION_1_6 :: cast(i32, 0x00010006);
JNI_VERSION_1_8 :: cast(i32, 0x00010008);
JNI_VERSION_9   :: cast(i32, 0x00090000);
JNI_VERSION_10  :: cast(i32, 0x000a0000);
JNI_VERSION_19  :: cast(i32, 0x00130000);
JNI_VERSION_20  :: cast(i32, 0x00140000);
JNI_VERSION_21  :: cast(i32, 0x00150000);
JNI_VERSION_24  :: cast(i32, 0x00180000);

