module vmath

struct v3 {
    x: f32,
    y: f32,
    z: f32,
}

struct m4 {
	row1: [4]f32,
	row2: [4]f32,
	row3: [4]f32,
	row4: [4]f32,
}

exp :: fn #link="expf"(t: f32) -> f32;
sin :: fn #link="sinf"(t: f32) -> f32;
cos :: fn #link="cosf"(t: f32) -> f32;
sqrt :: fn #link="sqrtf"(t: f32) -> f32;

PI   :: 3.14159265358979323846;
PI_2 :: 1.57079632679489661923;

max_v2 :: fn(a: v2, b: v2) -> v2 #inline {
    return .{max(a.x, b.x), max(a.y, b.y)};
}

max :: fn(a0: $t, a1: t) -> t #inline {
    return if a0 > a1 a0 else a1;
}

min :: fn(a0: $t, a1: t) -> t #inline {
    return if a0 < a1 a0 else a1;
}

abs :: fn(v: $T) -> T #inline {
    if v < 0 return -v;
    return v;
}

v2_len :: fn(a: v2) -> f32 #inline {
    return sqrt(a.x * a.x + a.y * a.y);
}

v2_dot :: fn(a: v2, b: v2) -> f32 #inline {
    return a.x * b.x + a.y * b.y;
}

v2_angle :: fn(angle: f32) -> v2 #inline {
    return v2 { cos(angle), sin(angle) };
}

v2_scale :: fn(v: v2, t: f32) -> v2 #inline {
    scale := v2 { t, t };
    return v * scale;
}

v3_add :: fn(l: v3, r: v3) -> v3 #inline {
    return .{l.x+r.x, l.y+r.y, l.z+r.z};
}

v4_scale :: fn(v: v4, t: f32) -> v4 #inline {
    scale := v4 { t, t, t, t };
    return v * scale;
}

map :: fn (t: f32, from1: f32, to1: f32, from2: f32, to2: f32) -> f32 #inline {
 return from2 + ((to2 - from2) / (to1 - from1)) * (t - from1);
}

sigmoid :: fn(t: f32) -> f32 {
    return 1.0 / (1.0 + exp(-t));
}

lerp :: fn (a: f32, b: f32, t: f32) -> f32 #inline {
	return a + (b - a) * t;
}

lerp_v4 :: fn(a: v4, b: v4, t: f32) -> v4 #inline {
    return a + (b - a) * .{t, t, t, t};
}

clamp :: fn (x: $t, min: t, max: t) -> t #inline {
    return if x > max max else if x < min min else x;
}

ortho :: fn(left: f32, right: f32, bottom: f32, top: f32) -> m4 {
	far :: 1.0;
	near :: 0.0;
	return m4 {
		[4]f32 { 2/(right-left), 0,              0,             - ( (right + left)/(right - left) ) },
		[4]f32 { 0,              2/(top-bottom), 0,             - ( (top + bottom)/(top - bottom) ) },
		[4]f32 { 0,              0,              -2/(far-near), - ( (far + near)/(far - near) ) },
		[4]f32 { 0,              0,              0, 1 },
	};
}

is_point_in_rect :: fn(pos: v2, bottom_left: v2, size: v2) -> bool {
	top_right := bottom_left + size;
	if pos.x < bottom_left.x || pos.y < bottom_left.y return false;
	if pos.x > top_right.x || pos.y > top_right.y return false;
	return true;
}

color_to_v4 :: fn(c: u32) -> v4 {
    SCALE :: 1.0 / 255.0;
    a := cast(f32, (c >> 24) & 0xFF);
    r := cast(f32, (c >> 16) & 0xFF);
    g := cast(f32, (c >> 8) & 0xFF);
    b := cast(f32, (c >> 0) & 0xFF);
    rgba := v4 {r, g, b, a};
    mult := v4 {SCALE, SCALE, SCALE, SCALE};
    return rgba * mult;
}

v4_to_color :: fn(c: v4) -> u32 {
    r := cast(u32, c.x * 255.0);
    g := cast(u32, c.y * 255.0);
    b := cast(u32, c.z * 255.0);
    a := cast(u32, c.w * 255.0);
    return a << 24 | r << 16 | g << 8 | b;
}

distance_v2 :: fn(a: v2, b: v2) -> f32 {
    x := abs(a.x - b.x);
    y := abs(a.y - b.y);

    return sqrt(x * x + y * y);
}

