module main

#import scene as *
#import gui as *
#import font as *
#import log
#import android as a
#import base
#import pthread
#import backtrace as bt
#import io
#import os
#import "libc.rcp" as c
#import draw
#import mem

struct Engine {
    frame: int,
    queue: ?*
}

enum BluetoothStatus {
    NotSupported,
    Disabled,
    Enabled,
}

renderer_allocator: mem.Allocator;

usleep :: fn(usec: uint) -> i32 #foreign;
signal :: fn(signum: i32, handler: fn(num: i32)) #foreign;
__errno :: fn() -> *i32 #foreign;

exit :: fn #foreign(code: i32);

handle_segfault :: fn(sig: i32) {
    // @NOTE: not using log.fatal here since it needs to allocate memory
    stack := [128]* {};
    out := [512]u8 {};
    size := bt.capture(&stack[0], 128);
    bt.dump(&out[0], &stack[0], size);
    if sig == 11 {
        a.log_write(.ERROR, log.tag, c"Segmentation Fault (core dumped)"); 

    } else if sig == 5 {
        a.log_write(.ERROR, log.tag, c"Trap"); 

    } else {
        a.log_write(.ERROR, log.tag, c"Unknown Signal"); 
    }
    a.log_write(.ERROR, log.tag, c"Stack Trace"); 
    a.log_print(.ERROR, log.tag, c"%s", &out[0]);
    exit(1);
}

get_engine :: fn(activity: *a.NativeActivity) -> *Engine {
    return cast(*Engine, activity.instance);
}

opt_window: ?*a.NativeWindow;

on_window_create :: fn(activity: *a.NativeActivity, window: *a.NativeWindow) {
    width := a.NativeWindow_getWidth(window);
    height := a.NativeWindow_getHeight(window);
    res := a.NativeWindow_setBuffersGeometry(window, width, height, .R8G8B8A8_UNORM);

    opt_window = window;

    if draw.renderer.backbuffer != null {
        draw.free_texture(?draw.renderer.backbuffer);
    }
    draw.renderer.backbuffer = draw.allocate_texture(width, height);
}

on_window_resized :: fn(activity:* a.NativeActivity, window: *a.NativeWindow) {
    width := a.NativeWindow_getWidth(window);
    height := a.NativeWindow_getHeight(window);
    res := a.NativeWindow_setBuffersGeometry(window, width, height, .R8G8B8A8_UNORM);

    opt_window = window;
    if draw.renderer.backbuffer != null {
        draw.free_texture(?draw.renderer.backbuffer);
    }
    draw.renderer.backbuffer = draw.allocate_texture(width, height);
}

on_window_destroyed :: fn(activity: *a.NativeActivity, window: *a.NativeWindow) {
    #assert window == opt_window;
    opt_window = null;
}

on_input_queue_created :: fn(activity: *a.NativeActivity, queue: *a.InputQueue) {
    engine := get_engine(activity);
    engine.queue = queue;
}

on_input_queue_destroyed :: fn(activity: *a.NativeActivity, queue: *a.InputQueue) {
    engine := get_engine(activity);
    engine.queue = null;
}

ANativeActivity_onCreate :: fn #foreign(activity: *a.NativeActivity, saved_state: *, saved_state_size: int) {
    a.log_write(.INFO, c"vpong", c"onCreate() start");
    // SIGSEGV
    signal(11, handle_segfault);
    // SIGTRAP
    signal(5, handle_segfault);


    attributes: pthread.attr_t;

    PTHREAD_DETACHED :: cast(i32, 0x1);
    pthread.attr_init(&attributes);
    pthread.attr_setdetachstate(&attributes, PTHREAD_DETACHED);
    
    // @NOTE: not using log.fatal here since it needs to allocate memory
    mem_ := c.malloc(size_of Engine);
    if !mem_ {
        a.log_write(.FATAL, c"vpong", c"malloc() failed");
        exit(1);
    }

    renderer_allocator = c.make_malloc_allocator(true);
    draw.renderer = draw.make_renderer(&renderer_allocator);

    engine := cast(*Engine, ?mem_);
    *engine = .{};
    activity.instance = engine;

    activity.callbacks.onNativeWindowCreated = on_window_create;
    activity.callbacks.onInputQueueCreated = on_input_queue_created;
    activity.callbacks.onInputQueueDestroyed = on_input_queue_destroyed;
    activity.callbacks.onNativeWindowResized = on_window_resized;
    activity.callbacks.onNativeWindowDestroyed = on_window_destroyed;

    thread: int;
    res := pthread.create(&thread, null, main, activity);
    if res != 0 {
        a.log_write(.FATAL, c"vpong", c"pthread_create() failed"); 
        exit(1);
    }

    a.log_write(.INFO, c"vpong", c"_onCreate() completed successfully");

    return;
}

get_time_in_nanos :: fn() -> int {
    ts := os.timespec {};
    os.syscall(os.SYS_clock_gettime, os.CLOCK_MONOTONIC, &ts);
    return ts.tv_sec * 1_000_000_000 + ts.tv_nsec;
}

sinf :: fn(x: f32) -> f32 #foreign;

PI :: @f32 3.14159265358979323846264338327950288;

handle_ui_events :: fn(UI: *GuiState, font: *Font) {
    if draw.renderer.backbuffer == null {
        UI.command_idx = 0;
        return;
    }

    backbuffer := ?draw.renderer.backbuffer;


    screen_size := draw.tex_to_v2(backbuffer);
    for i in UI.command_idx {
        command := UI.commands[i];
        match command.type {
            .DrawBox: {
                drawbox := cast(*CommandDrawBox, command);
                box := drawbox.box;
                xy := v2_from_ui(box.xy, screen_size);
                size := size_from_ui(box.size, screen_size);
                color := draw.v4_to_color(drawbox.color);

				//xy.y -= size.y;

                draw.draw_color(backbuffer, draw.v2_to_rect(xy, size), color);
            }
            .DrawText: {
                draw := cast(*CommandDrawText, command);
                xy := v2_from_ui(draw.at, screen_size);
                xyi := iv2 { cast(i32, xy.x), cast(i32, xy.y) };

                draw_text(font, draw.text, backbuffer, xyi, draw.scale);
            }
        };
    }

    UI.command_idx = 0;
}

redraw_window :: fn(time_ms: int, font: *Font, UI: *GuiState) {
    backbuffer := ?draw.renderer.backbuffer;

    at := backbuffer.pixels;
    for y in backbuffer.height {
        for x in backbuffer.width {
            pixel := at[x];
            a := (pixel >> 24) & 0xFF;
            r := (pixel >> 16) & 0xFF;
            g := (pixel >> 8)  & 0xFF;
            b := (pixel >> 0)  & 0xFF;
            at[x] = a << 24 | b << 16 | g << 8 | r;

        }
        at += backbuffer.width;
    }

    buff := a.NativeWindow_Buffer {};
    if opt_window == null return;
    if a.NativeWindow_lock(?opt_window, &buff, null) != 0 {
        log.warn("Failed to lock window buffer");
        return;
    }

    if buff.bits == null || draw.renderer.backbuffer == null {
        if opt_window {
            a.NativeWindow_unlockAndPost(?opt_window);
        }
		return;
	}

    at = backbuffer.pixels;
    dst_at := cast(*u32, ?buff.bits);
    for y in backbuffer.height {
        for x in backbuffer.width {
            if opt_window == null break;

            dst_at[x] = at[x];
        }
        if opt_window == null break;

        at += backbuffer.width;
        dst_at += buff.stride;
    }
    if opt_window {
        a.NativeWindow_unlockAndPost(?opt_window);
    }

}

release_is_from_move: bool;
main :: fn(state_: *) -> ?* { 
    activity := cast(*a.NativeActivity, state_);

    engine := get_engine(activity);

    UI := init_gui();
    scene0 := scene_00(&UI);
    scene1 := scene_01(&UI);

    scene := scene1;

	print_gui(scene, 0);

    env: *a.JNIEnv;
    vm := activity.vm;

    log.info("Attaching current thread...");
    if (*vm).AttachCurrentThread(vm, &env, null) != 0 {
        log.fatal("Failed to attach current thread!");
        log.exit(1);
    }


    log.info("Trying to find class...");
    //class_ := find_class_with_class_loader(env, c"com/vasko/pong/TerminalPrinter", activity.clazz);
    class_ := (*env).GetObjectClass(env, activity.clazz);
    if class_ == null {
        log.fatal("Failed to find object class");
        log.exit(1);
    }
    log.info("Found it!");
    class := ?class_;

    log.info("Trying to find method...");
    jm_getBluetoothStatus_ := (*env).GetMethodID(env, class, c"getBluetoothStatus", c"()I"); 
    if jm_getBluetoothStatus_ == null {
        log.fatal("Couldn't find getBluetoothStatus method");
        log.exit(1);
    }

    jm_getData_ := (*env).GetMethodID(env, class, c"getData", c"()[B"); 
    if jm_getData_ == null {
        log.fatal("Couldn't find getData method");
        log.exit(1);
    }

    jm_getBluetoothStatus := ?jm_getBluetoothStatus_;
    jm_getData := ?jm_getData_;
    bluetooth_status := BluetoothStatus.Disabled;

	fps := 0.0;
    font: Font;

    start_ms := get_time_in_nanos() / 1_000_000;
    for {

        if opt_window != null && font.inited == false {
            font = init_font(&draw.renderer, activity.assetManager);
        }

        if engine.queue {
            q := ?engine.queue;
            event: *a.InputEvent;
            for a.InputQueue_getEvent(q, &event) >= 0 {
                if draw.renderer.backbuffer == null {
                    a.InputQueue_finishEvent(q, event, 1);
                    continue;
                }
                
                if a.InputEvent_getType(event) == .MOTION {
                    action := a.MotionEvent_getAction(event);
                    x := a.MotionEvent_getX(event, 0);
                    y := a.MotionEvent_getY(event, 0);
                    screen_size := draw.get_screen_size();
                    ui_xy := v2_to_ui(.{x, y}, screen_size);

                    match action {
                        .MOVE: {
                            release_is_from_move = true;
                            
                            mouse_move(&UI, scene, ui_xy);
                        }
                        .UP: {
                            mouse_move(&UI, scene, ui_xy);
                            if release_is_from_move {
                                release_is_from_move = false; 
                                yield;
                            }

                            mouse_clicked(&UI, scene);

                        }
                        .DOWN: {
                            release_is_from_move = false;
                        }
                    };
                }

                a.InputQueue_finishEvent(q, event, 1);
            }
        }

        if draw.renderer.backbuffer == null {
            continue;
        }

        if bluetooth_status != .Enabled {
            bluetooth_status = cast(BluetoothStatus, (*env).CallIntMethod(env, activity.clazz, jm_getBluetoothStatus));
        }

        handle_ui_events(&UI, &font);

        backbuffer := ?draw.renderer.backbuffer;
        screen_center := iv2 { cast(i32, backbuffer.width) / 2, cast(i32, backbuffer.height) / 2 };

        match bluetooth_status {
            .Enabled: {
                draw_hierarchy(&UI, scene);
            }
            .NotSupported: {
                draw_text_centered(&font, "Bluetooth not supported!", backbuffer, screen_center, 1.0);
            }
            .Disabled: {
                draw_text_centered(&font, "Enable Bluetooth!", backbuffer, screen_center, 1.0);
            }
        };

		byte_arr_ := (*env).CallObjectMethod(env, activity.clazz, jm_getData, null);
		if byte_arr_ {
			byte_arr := ?byte_arr_;
			len := (*env).GetArrayLength(env, byte_arr);
			elems := (*env).GetByteArrayElements(env, byte_arr, null);
			if elems != null {
				text := io.sprint("Got: %s", cast(*u8, ?elems));
                draw_text_centered(&font, text, backbuffer, screen_center, 1.0);
				(*env).ReleaseByteArrayElements(env, byte_arr, ?elems, a.JNI_ABORT);
			}
		}

        redraw_window(start_ms, &font, &UI);

        end_ms := get_time_in_nanos() / 1_000_000;
        passed := end_ms - start_ms;
        if passed < 16 {
            usleep(cast(uint, (16 - passed) * 1000));
            end_ms = get_time_in_nanos() / 1_000_000;
        }

		passed = end_ms - start_ms;
		fps = 1.0/(cast(f32, passed)/1000.0);

        start_ms = end_ms;
        mem.reset_temp();
    }

    return null;
}

