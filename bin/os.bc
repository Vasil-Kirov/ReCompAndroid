; ModuleID = 'os'
source_filename = "os.rcp"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "arm64v8a-unknown-linux-androideabi34"

%slice.253 = type { i64, ptr }
%string.196 = type { ptr, i64 }
%__os_AllocCtx.237 = type { i64 }

@__main_LogTag = external global ptr
@__main_GLOBAL = external global i64
@__pthread_DETACHED = external global i32
@__init_INVALID_TYPE = external global i64
@__init_type_table = external global %slice.253
@__os_stdin = global i64 0
@__os_stdout = global i64 0
@__os_stderr = global i64 0
@__os_SYS_read = global i64 0
@__os_SYS_write = global i64 0
@__os_SYS_open = global i64 0
@__os_SYS_mmap = global i64 0
@__os_SYS_munmap = global i64 0
@__os_SYS_exit = global i64 0
@__os_PROT_READ = global i64 0
@__os_PROT_WRITE = global i64 0
@__os_PROT_EXEC = global i64 0
@__os_PROT_NONE = global i64 0
@__os_MAP_SHARED = global i64 0
@__os_MAP_PRIVATE = global i64 0
@__os_MAP_ANONYMOUS = global i64 0
@__os_MAP_ANON = global i64 0
@__os_MAP_NORESERVE = global i64 0
@__str_CONTINUE_BIT = external global i8
@0 = private unnamed_addr constant [16 x i8] c"Assert Failed!\0A\00", align 1

define void @__os___GlobalInitializerFunction_0() {
block_0:
  store i64 0, ptr @__os_stdin, align 8
  store i64 1, ptr @__os_stdout, align 8
  store i64 2, ptr @__os_stderr, align 8
  store i64 0, ptr @__os_SYS_read, align 8
  store i64 1, ptr @__os_SYS_write, align 8
  store i64 2, ptr @__os_SYS_open, align 8
  store i64 9, ptr @__os_SYS_mmap, align 8
  store i64 11, ptr @__os_SYS_munmap, align 8
  store i64 60, ptr @__os_SYS_exit, align 8
  store i64 1, ptr @__os_PROT_READ, align 8
  store i64 2, ptr @__os_PROT_WRITE, align 8
  store i64 4, ptr @__os_PROT_EXEC, align 8
  store i64 0, ptr @__os_PROT_NONE, align 8
  store i64 1, ptr @__os_MAP_SHARED, align 8
  store i64 2, ptr @__os_MAP_PRIVATE, align 8
  store i64 32, ptr @__os_MAP_ANONYMOUS, align 8
  store i64 32, ptr @__os_MAP_ANON, align 8
  store i64 16384, ptr @__os_MAP_NORESERVE, align 8
  ret void
}

declare ptr @__main_thread_start(ptr)

declare void @__main_warn(ptr, ptr)

declare void @__main_fatal(ptr, ptr)

declare void @ANativeActivity_onCreate(ptr, ptr, i64)

declare i32 @__main_main()

declare i32 @__android_log_write(i32, ptr, ptr)

declare i32 @__android_log_print(i32, ptr, ptr, ...)

declare i32 @pthread_create(ptr, ptr, ptr, ptr)

declare i32 @pthread_attr_init(ptr)

declare i32 @pthread_attr_setdetachstate(ptr, i32)

declare void @__init_global_initializers()

declare i64 @__init_get_struct_alignment(i64)

declare i64 @__init_get_type_alignment(i64)

declare i64 @__init_get_basic_type_size(ptr)

declare i64 @__init_get_struct_size(i64)

declare i64 @__init_get_type_size(i64)

declare i64 @__init_get_struct_member_offset(ptr, i64)

declare i32 @__main_main.1()

declare i32 @main()

define void @__os_assert(i1 %0, ptr %1) !dbg !78 {
block_0:
  %2 = alloca i1, align 1
  %3 = alloca %string.196, align 8
  call void @llvm.memset.p0.i32(ptr align 1 %2, i8 0, i32 1, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 16, i1 false)
  %4 = alloca %string.196, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 16, i1 false)
  store i1 %0, ptr %2, align 1, !dbg !91
  call void @llvm.dbg.value(metadata ptr %2, metadata !92, metadata !DIExpression()), !dbg !91
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 16, i1 false), !dbg !91
  call void @llvm.dbg.value(metadata ptr %3, metadata !93, metadata !DIExpression()), !dbg !91
  %5 = load i1, ptr %2, align 1, !dbg !94
  %6 = icmp eq i1 %5, false, !dbg !94
  br i1 %6, label %block_1, label %block_2, !dbg !94

block_1:                                          ; preds = %block_0
  %7 = alloca %string.196, align 8, !dbg !95
  %String = getelementptr inbounds %string.196, ptr %7, i32 0, i32 0, !dbg !95
  %Size = getelementptr inbounds %string.196, ptr %7, i32 0, i32 1, !dbg !95
  store ptr @0, ptr %String, align 8, !dbg !95
  store i64 15, ptr %Size, align 8, !dbg !95
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %7, i64 16, i1 false), !dbg !95
  call void @llvm.dbg.declare(metadata ptr %4, metadata !96, metadata !DIExpression()), !dbg !95
  %8 = getelementptr inbounds %string.196, ptr %4, i32 0, i32 0, !dbg !97
  %9 = load ptr, ptr %8, align 8, !dbg !97
  %10 = getelementptr inbounds %string.196, ptr %4, i32 0, i32 1, !dbg !97
  %11 = load i64, ptr %10, align 8, !dbg !97
  %12 = trunc i64 %11 to i32, !dbg !97
  call void @__os_print(ptr %9, i32 %12), !dbg !97
  %13 = getelementptr inbounds %string.196, ptr %3, i32 0, i32 0, !dbg !98
  %14 = load ptr, ptr %13, align 8, !dbg !98
  %15 = getelementptr inbounds %string.196, ptr %3, i32 0, i32 1, !dbg !98
  %16 = load i64, ptr %15, align 8, !dbg !98
  %17 = trunc i64 %16 to i32, !dbg !98
  call void @__os_print(ptr %14, i32 %17), !dbg !98
  call void @__os_abort(), !dbg !99
  br label %block_3, !dbg !99

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !99

block_3:                                          ; preds = %block_2, %block_1
  ret void, !dbg !100
}

declare i64 @_system_call(i64, ...)

define void @__os_print(ptr %0, i32 %1) !dbg !101 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false)
  store ptr %0, ptr %2, align 8, !dbg !105
  call void @llvm.dbg.value(metadata ptr %2, metadata !106, metadata !DIExpression()), !dbg !105
  store i32 %1, ptr %3, align 4, !dbg !105
  call void @llvm.dbg.value(metadata ptr %3, metadata !107, metadata !DIExpression()), !dbg !105
  %4 = load i64, ptr @__os_SYS_write, align 8, !dbg !108
  %5 = load ptr, ptr %2, align 8, !dbg !108
  %6 = load i32, ptr %3, align 4, !dbg !108
  %7 = call i64 (i64, ...) @_system_call(i64 %4, i64 1, ptr %5, i32 %6), !dbg !108
  ret void, !dbg !109
}

define void @__os_abort() !dbg !110 {
block_0:
  %0 = load i64, ptr @__os_SYS_exit, align 8, !dbg !113
  %1 = call i64 (i64, ...) @_system_call(i64 %0, i64 1), !dbg !113
  ret void, !dbg !114
}

define ptr @__os_alloc(i64 %0) !dbg !115 {
block_0:
  %1 = alloca i64, align 8
  %2 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  %3 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %3, i8 0, i32 8, i1 false)
  store i64 %0, ptr %1, align 8, !dbg !119
  call void @llvm.dbg.value(metadata ptr %1, metadata !120, metadata !DIExpression()), !dbg !119
  %4 = load i64, ptr @__os_SYS_mmap, align 8, !dbg !121
  %5 = load i64, ptr %1, align 8, !dbg !121
  %6 = add i64 %5, 8, !dbg !121
  %7 = load i64, ptr @__os_PROT_READ, align 8, !dbg !121
  %8 = load i64, ptr @__os_PROT_WRITE, align 8, !dbg !121
  %9 = or i64 %7, %8, !dbg !121
  %10 = load i64, ptr @__os_MAP_PRIVATE, align 8, !dbg !121
  %11 = load i64, ptr @__os_MAP_ANON, align 8, !dbg !121
  %12 = or i64 %10, %11, !dbg !121
  %13 = load i64, ptr @__os_MAP_NORESERVE, align 8, !dbg !121
  %14 = or i64 %12, %13, !dbg !121
  %15 = call i64 (i64, ...) @_system_call(i64 %4, ptr null, i64 %6, i64 %9, i64 %14, i64 -1, i64 0), !dbg !121
  %16 = inttoptr i64 %15 to ptr, !dbg !121
  store ptr %16, ptr %2, align 8, !dbg !121
  call void @llvm.dbg.declare(metadata ptr %2, metadata !122, metadata !DIExpression()), !dbg !121
  %17 = load ptr, ptr %2, align 8, !dbg !127
  %18 = icmp eq ptr %17, null, !dbg !127
  br i1 %18, label %block_1, label %block_2, !dbg !127

block_1:                                          ; preds = %block_0
  ret ptr null, !dbg !128

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !128

block_3:                                          ; preds = %block_2
  %19 = load ptr, ptr %2, align 8, !dbg !129
  store ptr %19, ptr %3, align 8, !dbg !129
  call void @llvm.dbg.declare(metadata ptr %3, metadata !130, metadata !DIExpression()), !dbg !129
  %20 = load ptr, ptr %3, align 8, !dbg !132
  %21 = getelementptr inbounds %__os_AllocCtx.237, ptr %20, i32 0, i32 0, !dbg !132
  %22 = load i64, ptr %1, align 8, !dbg !132
  %23 = add i64 %22, 8, !dbg !132
  store i64 %23, ptr %21, align 8, !dbg !132
  %24 = load ptr, ptr %3, align 8, !dbg !133
  %25 = getelementptr %__os_AllocCtx.237, ptr %24, i64 1, !dbg !133
  ret ptr %25, !dbg !133
}

define void @__os_free(ptr %0) !dbg !134 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  call void @llvm.memset.p0.i32(ptr align 8 %1, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  store ptr %0, ptr %1, align 8, !dbg !137
  call void @llvm.dbg.value(metadata ptr %1, metadata !138, metadata !DIExpression()), !dbg !137
  %3 = load ptr, ptr %1, align 8, !dbg !139
  %4 = getelementptr %__os_AllocCtx.237, ptr %3, i64 -1, !dbg !139
  store ptr %4, ptr %2, align 8, !dbg !139
  call void @llvm.dbg.declare(metadata ptr %2, metadata !140, metadata !DIExpression()), !dbg !139
  %5 = load i64, ptr @__os_SYS_munmap, align 8, !dbg !141
  %6 = load ptr, ptr %2, align 8, !dbg !141
  %7 = load ptr, ptr %2, align 8, !dbg !141
  %8 = getelementptr inbounds %__os_AllocCtx.237, ptr %7, i32 0, i32 0, !dbg !141
  %9 = load i64, ptr %8, align 8, !dbg !141
  %10 = call i64 (i64, ...) @_system_call(i64 %5, ptr %6, i64 %9), !dbg !141
  ret void, !dbg !142
}

define i32 @__os_read_stdin_line(ptr %0, i32 %1) !dbg !143 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  call void @llvm.memset.p0.i32(ptr align 8 %2, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 4 %3, i8 0, i32 4, i1 false)
  call void @llvm.memset.p0.i32(ptr align 8 %4, i8 0, i32 8, i1 false)
  call void @llvm.memset.p0.i32(ptr align 4 %5, i8 0, i32 4, i1 false)
  %6 = alloca i8, align 4
  call void @llvm.memset.p0.i32(ptr align 4 %6, i8 0, i32 1, i1 false)
  store ptr %0, ptr %2, align 8, !dbg !146
  call void @llvm.dbg.value(metadata ptr %2, metadata !147, metadata !DIExpression()), !dbg !146
  store i32 %1, ptr %3, align 4, !dbg !146
  call void @llvm.dbg.value(metadata ptr %3, metadata !148, metadata !DIExpression()), !dbg !146
  %7 = load ptr, ptr %2, align 8, !dbg !149
  store ptr %7, ptr %4, align 8, !dbg !149
  call void @llvm.dbg.declare(metadata ptr %4, metadata !150, metadata !DIExpression()), !dbg !149
  store i32 0, ptr %5, align 4, !dbg !151
  call void @llvm.dbg.declare(metadata ptr %5, metadata !152, metadata !DIExpression()), !dbg !151
  br label %block_1, !dbg !153

block_1:                                          ; preds = %block_6, %block_0
  %8 = load i32, ptr %5, align 4, !dbg !153
  %9 = load i32, ptr %3, align 4, !dbg !153
  %10 = icmp ult i32 %8, %9, !dbg !153
  br i1 %10, label %block_2, label %block_3, !dbg !153

block_2:                                          ; preds = %block_1
  store i8 0, ptr %6, align 1, !dbg !154
  call void @llvm.dbg.declare(metadata ptr %6, metadata !155, metadata !DIExpression()), !dbg !154
  %11 = load i64, ptr @__os_SYS_read, align 8, !dbg !156
  %12 = load i64, ptr @__os_stdin, align 8, !dbg !156
  %13 = call i64 (i64, ...) @_system_call(i64 %11, i64 %12, ptr %6, i64 1), !dbg !156
  %14 = load i8, ptr %6, align 1, !dbg !157
  %15 = zext i8 %14 to i32, !dbg !157
  %16 = icmp eq i32 %15, 10, !dbg !157
  br i1 %16, label %block_4, label %block_5, !dbg !157

block_4:                                          ; preds = %block_2
  br label %block_3, !dbg !158

block_5:                                          ; preds = %block_2
  br label %block_6, !dbg !158

block_6:                                          ; preds = %block_5
  %17 = load ptr, ptr %4, align 8, !dbg !159
  %18 = load i32, ptr %5, align 4, !dbg !159
  %19 = getelementptr i8, ptr %17, i32 %18, !dbg !159
  %20 = load i8, ptr %6, align 1, !dbg !159
  store i8 %20, ptr %19, align 1, !dbg !159
  %21 = load i32, ptr %5, align 4, !dbg !160
  %22 = add i32 %21, 1, !dbg !160
  store i32 %22, ptr %5, align 4, !dbg !160
  br label %block_1, !dbg !160

block_3:                                          ; preds = %block_4, %block_1
  %23 = load i32, ptr %5, align 4, !dbg !161
  ret i32 %23, !dbg !161
}

declare void @__io_push_string(ptr, ptr)

declare void @__io_format_uint(ptr, i64)

declare void @__io_format_int(ptr, i64)

declare void @__io_print_typetype(ptr, ptr)

declare void @__io_print_type(ptr, ptr)

declare void @__io_builder_to_string(ptr, ptr)

declare void @__io_print_type_with_formatter(ptr, i32, ptr)

declare void @__io___internal_print(ptr, ptr, ptr)

declare void @__io_vsprint(ptr, ptr, ptr)

declare void @__io_sprint(ptr, ptr, ptr)

declare void @__io_print(ptr, ptr)

declare void @__io_println(ptr, ptr)

declare void @__io_readln(ptr, ptr, i32)

declare i32 @__io_get_next(ptr)

declare void @"__io_format_float:type_*[]u32_f32_i32_:void"(i64, ptr, float, i32)

declare void @"__io_format_float:type_*[]u32_f64_i32_:void"(i64, ptr, double, i32)

declare ptr @__mem_generic_alloc(i64, ptr)

declare void @__mem_generic_free(ptr, ptr)

declare void @__mem_create_generic_allocator(ptr)

declare ptr @__mem_arena_alloc(i64, ptr)

declare void @__mem_no_free(ptr, ptr)

declare void @__mem_create_scratch(ptr, i64)

declare void @__mem_destroy_scratch(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare void @"__mem_make_slice:type_int_*__mem_Allocator_:[]u8"(ptr, i64, i64, ptr)

declare i64 @__str_to_int(ptr)

declare void @__str_create(ptr, ptr)

declare void @__str_append(ptr, ptr)

declare void @__str_append_u32(ptr, i32)

declare void @__str_append_u8(ptr, i8)

declare void @__str_from_builder(ptr, ptr, ptr)

declare void @__str_substr(ptr, ptr, i64, i64)

declare i64 @__str_get_codepoint_size(ptr)

declare ptr @__str_advance(ptr)

declare ptr @__str__it_advance(ptr, i64, i64)

declare i32 @__str_deref(ptr)

declare i32 @__str_index(ptr, i64)

declare void @"__array_add:*[]u32_u32_:void"(ptr, i32)

declare void @"__array_create:type_*__mem_Allocator_:[]u8"(ptr, i64, ptr)

declare void @"__array_add:*[]u8_u8_:void"(ptr, i8)

declare void @"__array_create:type_*__mem_Allocator_:[]u32"(ptr, i64, ptr)

declare void @"__array_free:*[]u32_:void"(ptr)

declare void @"__array_free:*[]u8_:void"(ptr)

declare ptr @memcpy.2(ptr, ptr, i64)

declare ptr @memset.3(ptr, i32, i64)

declare void @_fltused()

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i32(ptr nocapture writeonly, i8, i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!76, !77}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "os.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !3, !15, !36, !45, !50, !54}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__init_VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__compile_CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__android_LogPriority", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70, !71, !72, !73, !74, !75}
!67 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "DEFAULT", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "VERBOSE", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "DEBUG", value: 3, isUnsigned: true)
!71 = !DIEnumerator(name: "INFO", value: 4, isUnsigned: true)
!72 = !DIEnumerator(name: "WARN", value: 5, isUnsigned: true)
!73 = !DIEnumerator(name: "ERROR", value: 6, isUnsigned: true)
!74 = !DIEnumerator(name: "FATAL", value: 7, isUnsigned: true)
!75 = !DIEnumerator(name: "SILENT", value: 8, isUnsigned: true)
!76 = !{i32 2, !"CodeView", i32 1}
!77 = !{i32 2, !"Debug Info Version", i32 3}
!78 = distinct !DISubprogram(name: "assert", linkageName: "__os_assert", scope: !1, file: !1, line: 5, type: !79, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!79 = !DISubroutineType(types: !80)
!80 = !{null, !81, !82}
!81 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!82 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", scope: !83, file: !83, size: 128, elements: !84)
!83 = !DIFile(filename: "main.rcp", directory: "E:\\Non_C_Projects\\RCPProjects\\Android\\src")
!84 = !{!85, !88}
!85 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !83, file: !83, baseType: !86, size: 64, align: 64)
!86 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !87, size: 64, align: 64, dwarfAddressSpace: 0)
!87 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !83, file: !83, baseType: !89, size: 64, align: 64, offset: 64)
!89 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!90 = !{}
!91 = !DILocation(line: 5, scope: !78)
!92 = !DILocalVariable(name: "cond", scope: !78, file: !1, line: 5, type: !81)
!93 = !DILocalVariable(name: "reason", arg: 1, scope: !78, file: !1, line: 5, type: !82)
!94 = !DILocation(line: 6, scope: !78)
!95 = !DILocation(line: 7, scope: !78)
!96 = !DILocalVariable(name: "header", scope: !78, file: !1, line: 7, type: !82)
!97 = !DILocation(line: 8, scope: !78)
!98 = !DILocation(line: 9, scope: !78)
!99 = !DILocation(line: 10, scope: !78)
!100 = !DILocation(line: 12, scope: !78)
!101 = distinct !DISubprogram(name: "print", linkageName: "__os_print", scope: !1, file: !1, line: 117, type: !102, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!102 = !DISubroutineType(types: !103)
!103 = !{null, !86, !104}
!104 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!105 = !DILocation(line: 117, scope: !101)
!106 = !DILocalVariable(name: "data", scope: !101, file: !1, line: 117, type: !86)
!107 = !DILocalVariable(name: "count", arg: 1, scope: !101, file: !1, line: 117, type: !104)
!108 = !DILocation(line: 118, scope: !101)
!109 = !DILocation(line: 119, scope: !101)
!110 = distinct !DISubprogram(name: "abort", linkageName: "__os_abort", scope: !1, file: !1, line: 136, type: !111, spFlags: DISPFlagDefinition, unit: !0)
!111 = !DISubroutineType(types: !112)
!112 = !{null}
!113 = !DILocation(line: 137, scope: !110)
!114 = !DILocation(line: 138, scope: !110)
!115 = distinct !DISubprogram(name: "alloc", linkageName: "__os_alloc", scope: !1, file: !1, line: 140, type: !116, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!116 = !DISubroutineType(types: !117)
!117 = !{!118, !89}
!118 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!119 = !DILocation(line: 140, scope: !115)
!120 = !DILocalVariable(name: "size", scope: !115, file: !1, line: 140, type: !89)
!121 = !DILocation(line: 141, scope: !115)
!122 = !DILocalVariable(name: "myb_ctx", scope: !115, file: !1, line: 141, type: !123)
!123 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*__os_AllocCtx", baseType: !124, size: 64, align: 64, dwarfAddressSpace: 0)
!124 = !DICompositeType(tag: DW_TAG_structure_type, name: "__os_AllocCtx", scope: !1, file: !1, size: 64, elements: !125)
!125 = !{!126}
!126 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1, file: !1, baseType: !89, size: 64, align: 64)
!127 = !DILocation(line: 148, scope: !115)
!128 = !DILocation(line: 149, scope: !115)
!129 = !DILocation(line: 152, scope: !115)
!130 = !DILocalVariable(name: "ctx", scope: !115, file: !1, line: 152, type: !131)
!131 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*__os_AllocCtx", baseType: !124, size: 64, align: 64, dwarfAddressSpace: 0)
!132 = !DILocation(line: 154, scope: !115)
!133 = !DILocation(line: 155, scope: !115)
!134 = distinct !DISubprogram(name: "free", linkageName: "__os_free", scope: !1, file: !1, line: 158, type: !135, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!135 = !DISubroutineType(types: !136)
!136 = !{null, !118}
!137 = !DILocation(line: 158, scope: !134)
!138 = !DILocalVariable(name: "ptr", scope: !134, file: !1, line: 158, type: !118)
!139 = !DILocation(line: 159, scope: !134)
!140 = !DILocalVariable(name: "ctx", scope: !134, file: !1, line: 159, type: !131)
!141 = !DILocation(line: 160, scope: !134)
!142 = !DILocation(line: 161, scope: !134)
!143 = distinct !DISubprogram(name: "read_stdin_line", linkageName: "__os_read_stdin_line", scope: !1, file: !1, line: 163, type: !144, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !90)
!144 = !DISubroutineType(types: !145)
!145 = !{!104, !118, !104}
!146 = !DILocation(line: 163, scope: !143)
!147 = !DILocalVariable(name: "buffer", scope: !143, file: !1, line: 163, type: !118)
!148 = !DILocalVariable(name: "size", arg: 1, scope: !143, file: !1, line: 163, type: !104)
!149 = !DILocation(line: 164, scope: !143)
!150 = !DILocalVariable(name: "buf", scope: !143, file: !1, line: 164, type: !86)
!151 = !DILocation(line: 165, scope: !143)
!152 = !DILocalVariable(name: "count", scope: !143, file: !1, line: 165, type: !104)
!153 = !DILocation(line: 166, scope: !143)
!154 = !DILocation(line: 167, scope: !143)
!155 = !DILocalVariable(name: "c", scope: !143, file: !1, line: 167, type: !87)
!156 = !DILocation(line: 168, scope: !143)
!157 = !DILocation(line: 169, scope: !143)
!158 = !DILocation(line: 170, scope: !143)
!159 = !DILocation(line: 172, scope: !143)
!160 = !DILocation(line: 173, scope: !143)
!161 = !DILocation(line: 175, scope: !143)
